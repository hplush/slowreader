import type { FastEntry } from '@slowreader/core'

export const mockedFast: FastEntry[] = [
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'PsH5B3B0k-7dM73mQ7UGQ',
      isLoading: false,
      reading: 'fast',
      full: "<p>As a web developer, I wondered why there are two storages in browsers a session and a local storage. On searching about it I got that the only difference is about how long the data stays. I said okayyy...! After that, I never bothered about this thing again. </p>\n\n<p>While working with a huge client I found some challenges/errors which were solved when I transferred some data from session storage to local storage.</p>\n\n<p>I thought to take a deeper dive into this thing! So here I am sharing the exact details that answer the question of why we have local and session storage.</p>\n\n\n\n\n<h2>\n  \n  \n  Defination wise:\n</h2>\n\n<p>Local and session storage are both part of the Web Storage API, which allows websites to store data on the client side within the user's browser.</p>\n\n<p>If you, my friend are a developer then this definition should be enough for you! (for the similarities, not the differences üòÖ)</p>\n\n<p>Below are the indeed required details:</p>\n\n<h2>\n  \n  \n  Persistence Duration\n</h2>\n\n<p>Local Storage: Data stored in local storage has <strong>no expiration time</strong>. It remains available even after the browser is closed and reopened, providing a way to persist data across sessions. This is useful for data that needs to be kept between visits to the website, such as <strong>user preferences, settings, or state information</strong>.</p>\n\n<p>Session Storage: Data stored in session storage is only <strong>available for the duration of the page session</strong>. It is cleared when the page session ends, which typically happens when the browser tab or window is closed. This is ideal for temporary data that should only be available during a single session, such as <strong>form inputs or state information specific to that session</strong>.</p>\n\n\n\n\n<h2>\n  \n  \n  Scope (That's where I was stuck)\n</h2>\n\n<p>Local Storage: Accessible by all tabs and windows that <strong>share the same origin</strong> (same protocol, host, and port). This means if a user opens multiple tabs on the same site, they can all access the same local storage data.</p>\n\n<p>Session Storage: Isolated to the tab or window where it was created. <strong>Different tabs or windows do not share session storage</strong>, even if they are on the same site. This ensures that data is isolated per session, preventing potential conflicts or data leakage between tabs.</p>\n\n\n\n\n<h2>\n  \n  \n  Use Cases\n</h2>\n\n<p>Local Storage: Storing user preferences and settings. Caching data can improve performance by avoiding repeated network requests.<br>\nPersisting user state or information across sessions.</p>\n\n<p>Session Storage: Temporary storage for data during a single session, such as form data that hasn't been submitted yet. Information that should be cleared when the user closes the tab, like temporary state information that is session-specific.</p>\n\n\n\n\n<h2>\n  \n  \n  Security Considerations\n</h2>\n\n<p>Local Storage: Since data persists indefinitely, it can be a target for attackers if sensitive information is stored without proper security measures. It is essential to avoid storing sensitive data like passwords or personal information in local storage.</p>\n\n<p>Session Storage: Data has a shorter lifespan, reducing the risk window for potential exploitation. However, it still should not be used for highly sensitive information without proper security measures.</p>\n\n\n\n\n<p>That's all!! </p>\n\n<p>This is all the stuff that I could find out. If you have any other thing in mind which I missed just go to comments and mention about the same!</p>\n\n<p>Stay happy, Keep hustling<br>\nSigning off Meet Bhalodiya,</p>\n\n<p>Peace ‚úåÔ∏è</p>\n\n",
      media: [],
      originId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      publishedAt: 1716718666,
      title:
        'Reasons you might not know why there are two, a local and a session storage.',
      url: 'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'QksKxX3kURc51qu_ZF5EA',
      isLoading: false,
      reading: 'fast',
      full: '<p>Hi Folks,</p>\n\n<p>For past month I was scraping interview questions for Amazon, Google, Meta, Netflix, Yahoo, Cloudflare, Accenture etc.. in various sources, filtering useful questions (imho) and rewriting them in more details with solutions.</p>\n\n<p>publishing it here - <a href="https://prepare.sh/engineering/devops">https://prepare.sh/engineering/devops</a> (if you\'ll have issues with login please clean cookies).</p>\n\n<p>Also I will keep adding companies/question to have around 50+ top companies with their interview questions, so its work in progress.. If you find this type of content useful and want to help me with code/content/etc pls dm me :)</p>\n\n',
      media: [],
      originId:
        'https://dev.to/alexmuradov/i-scraped-all-devops-interview-questions-for-meta-amazon-google-yahoo-here-they-are-20li',
      publishedAt: 1716717756,
      title:
        'I scraped all DevOps Interview Questions for Meta, Amazon, Google, Yahoo... here they are..',
      url: 'https://dev.to/alexmuradov/i-scraped-all-devops-interview-questions-for-meta-amazon-google-yahoo-here-they-are-20li',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'pccrbTO5c_P5AZD-QoRmj',
      isLoading: false,
      reading: 'fast',
      full: '<p>How to Set Up Jenkins on¬†Docker<br>\n<strong>Introduction</strong><br>\nJenkins is a widely-used open-source automation server that helps automate the non-human part of the software development process. Docker, on the other hand, is a platform that enables developers to create, deploy, and run applications in containers. Combining Jenkins with Docker provides a powerful tool for continuous integration and continuous delivery (CI/CD).<br>\nIn this guide, we\'ll walk through the steps to set up Jenkins on Docker.<br>\n<strong>Prerequisites</strong></p>\n\n<ul>\n<li>Docker installed on your system.</li>\n<li>Basic understanding of Docker and Jenkins.</li>\n<li>Sufficient privileges to run Docker commands.</li>\n</ul>\n\n<p>Setting up Jenkins on Docker offers several advantages that can streamline and enhance your CI/CD workflow. Here are the key reasons why you might choose to deploy Jenkins using Docker:<br>\n<strong>1. Consistency and Isolation</strong><br>\nConsistency: Docker containers ensure that Jenkins runs in a consistent environment across different development, testing, and production environments. This consistency helps eliminate issues caused by variations in software configurations.<br>\nIsolation: Docker containers isolate Jenkins and its dependencies from other applications on the host system. This isolation helps prevent conflicts and makes it easier to manage dependencies.<br>\n<strong>2. Simplified Setup and Configuration</strong><br>\nEase of Setup: Docker simplifies the setup process by allowing you to pull and run pre-configured Jenkins images. This reduces the complexity involved in manually installing Jenkins and configuring its environment.<br>\nConfiguration Management: Docker makes it easy to version and manage configurations through Dockerfiles and Docker Compose, ensuring that your Jenkins setup can be easily replicated or modified.<br>\n<strong>3. Portability</strong><br>\nDocker containers can run on any system that supports Docker, making your Jenkins setup highly portable. This portability is particularly useful for developers working in different environments or for teams that need to move their CI/CD pipeline across various stages of development and production.<br>\n<strong>4. Scalability</strong><br>\nResource Allocation: Docker allows you to allocate specific resources (CPU, memory) to Jenkins containers, ensuring that Jenkins performs optimally without affecting other applications.<br>\nScaling: Running Jenkins in Docker containers makes it easier to scale your CI/CD infrastructure. You can quickly spin up additional Jenkins instances to handle increased workloads or parallelize build processes.<br>\n<strong>5. Simplified Maintenance and¬†Upgrades</strong><br>\nUpgrades: Upgrading Jenkins is straightforward with Docker. You can pull the latest Jenkins image and recreate the container without worrying about breaking the underlying system.<br>\nBackup and Recovery: Docker volumes can be used to persist Jenkins data, making it easier to backup and restore configurations, jobs, and build history.<br>\n<strong>6. Security</strong><br>\nSandboxing: Docker containers provide an additional layer of security by sandboxing Jenkins from the host system. This reduces the risk of potential vulnerabilities in Jenkins affecting the host.<br>\nControlled Access: Docker\'s networking and permission features allow for fine-grained control over how Jenkins interacts with other services and the network.<br>\n<strong>7. DevOps Integration</strong><br>\nDocker is a staple in modern DevOps practices. Running Jenkins on Docker integrates seamlessly with other containerized services and tools in your DevOps pipeline, promoting a more cohesive and efficient workflow.<br>\n<strong>Step-by-Step Guide</strong><br>\n<strong>Step 1: Install¬†Docker</strong><br>\nBefore setting up Jenkins, ensure Docker is installed on your machine.<br>\nFor Ubuntu:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>sudo apt update\nsudo apt install -y docker.io\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 2: Pull the Jenkins Docker¬†Image</strong><br>\nJenkins maintains an official Docker image. To pull the latest Jenkins image, run:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>docker pull jenkins/jenkins:lts\n</code></pre>\n\n</div>\n\n\n\n<p>The lts tag refers to the Long Term Support version, which is stable and recommended for most users.</p>\n\n<p><strong>Step 3: Run the Jenkins Container</strong><br>\nCreate and start a Jenkins container with the following command:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>docker run -d -p 8080:8080 jenkins/jenkins:lts\n</code></pre>\n\n</div>\n\n\n\n<p>Here\'s a breakdown of the command:<br>\n-d: Run the container in detached mode.<br>\n-p 8080:8080: Map port 8080 of the host to port 8080 of the container (Jenkins web int)</p>\n\n<p><strong>Step 4: Access¬†Jenkins</strong><br>\nOnce the container is running, you can access Jenkins by navigating to <a href="http://localhost:8080">http://localhost:8080</a> in your web browser.</p>\n\n<p><strong>Step 5: Unlock¬†Jenkins</strong><br>\nOn your first visit, Jenkins will ask you to unlock it using a password stored in the Docker container. Retrieve this password with:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>docker exec -it jenkins bash\ncat /var/jenkins_home/secrets/initialAdminPassword\n</code></pre>\n\n</div>\n\n\n\n<p>Copy the password and paste it into the Jenkins unlock page.</p>\n\n<p><strong>Step 6: Install Suggested Plugins</strong><br>\nAfter unlocking Jenkins, you\'ll be prompted to install plugins. Choose the "Install suggested plugins" option to get started quickly.</p>\n\n<p><strong>Step 7: Create an Admin¬†User</strong><br>\nNext, you\'ll need to create an admin user. Fill in the required details and complete the setup.</p>\n\n<p><strong>Step 8: Configure Jenkins</strong></p>\n\n<ol>\n<li>Now that Jenkins is set up, you can start configuring it to suit your project needs. This includes setting up:</li>\n<li>Global Tool Configuration: Define the locations for JDK, Git, Gradle, etc.</li>\n<li>Credentials: Add necessary credentials for accessing repositories and other tools.</li>\n<li>Jobs/Pipelines: Create jobs or pipelines for your CI/CD process.</li>\n</ol>\n\n<p><strong>Conclusion</strong><br>\nDeploying Jenkins on Docker simplifies the setup and management of your CI/CD pipeline. Docker containers provide a consistent environment for Jenkins, enhancing the reliability and scalability of your build process.<br>\nBy following the steps outlined in this guide, you will have a fully functional Jenkins server running in a Docker container. This setup allows you to explore and leverage Jenkins\' extensive range of plugins and configurations to further optimize your CI/CD workflow.</p>\n\n',
      media: [],
      originId:
        'https://dev.to/prajwal2023/streamlining-cicd-a-step-by-step-guide-to-setting-up-jenkins-on-docker-2b6',
      publishedAt: 1716717649,
      title:
        '"Streamlining CI/CD: A Step-by-Step Guide to Setting Up Jenkins on Docker"',
      url: 'https://dev.to/prajwal2023/streamlining-cicd-a-step-by-step-guide-to-setting-up-jenkins-on-docker-2b6',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'VEJXq_qz6ntmO0YgghUT2',
      isLoading: false,
      reading: 'fast',
      full: '<p>Docker is a popular containerization platform that allows developers to package their applications and dependencies into portable containers. This article provides a step-by-step guide on how to build Docker images on a Mac with an M1 chip.</p>\n\n<h3>\n  \n  \n  Solution Steps\n</h3>\n\n<p>Docker features an additional build called \'buildx\' that should be included with the Docker installation (ver:^20). We will use the <code>buildx</code> command to build the image.</p>\n\n<h4>\n  \n  \n  Step 1\n</h4>\n\n<p>Open Docker Desktop and go to Settings &gt; Resources tab. Increase memory and swap size, and restart Docker Desktop, so that later we do not run into the <code>JavaScript heap out of memory</code> error.<br>\n<a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fiuso3ogzd0mahqg0cl23.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fiuso3ogzd0mahqg0cl23.png" alt="Resource setting" width="800" height="351"></a></p>\n<h4>\n  \n  \n  Step 2\n</h4>\n\n<p>Also, add and modify the following command in the <code>node-project/Dockerfile</code>. </p>\n\n<p>OLD DOCKERFILE<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight docker"><code><span class="c">### STAGE 1: Build ###</span>\n<span class="c"># We label our intermediary docker container as \'builder\' to build/compile frontend dependencies</span>\n<span class="k">FROM</span><span class="w"> </span><span class="s">node:10.15.0-alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">builder</span>\n<span class="k">ARG</span><span class="s"> environment</span>\n</code></pre>\n\n</div>\n\n\n\n<p>NEW DOCKERFILE<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight docker"><code><span class="c">### STAGE 1: Build ###</span>\n<span class="c"># We label our intermediary docker container as \'builder\' to build/compile frontend dependencies</span>\n<span class="k">FROM</span><span class="w"> </span><span class="s">--platform=$BUILDPLATFORM node:10.15.0-alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">builder</span>\n<span class="k">ARG</span><span class="s"> environment</span>\n<span class="k">ENV</span><span class="s"> NODE_OPTIONS=--max_old_space_size=2048</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Step 3\n</h4>\n\n<p>Generally, the CPU of your machine can only run binaries for its native architecture. An x86 CPU can\'t run ARM binaries and vice versa. So, when we are building an image on an Intel machine, it cannot run the shell binary for ARM. Let\'s install the Docker image which contains binaries for other architectures.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code> <span class="nv">$ </span>docker run <span class="nt">--privileged</span> <span class="nt">--rm</span> tonistiigi/binfmt <span class="nt">--install</span> all\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Step 4\n</h4>\n\n<p>Create a new builder using the <code>docker-container</code> driver which gives you access to more complex features like multi-platform builds and the more advanced cache exporters, which are currently unsupported in the default Docker driver:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code><span class="nv">$ </span>docker buildx create <span class="nt">--name</span> customBuilder <span class="nt">--driver</span> docker-container <span class="nt">--bootstrap</span>\n<span class="nv">$ </span>docker buildx use customBuilder\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Step 5\n</h4>\n\n<p>Build &amp; load image locally</p>\n\n<p>The command below will build an image for standard x86 platforms (<code>linux/amd64</code>). For Apple Silicon Macs, use the platform as (<code>linux/arm64</code>).</p>\n\n<p>[Note: run the command from the project directory]<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code><span class="nv">$ </span>docker buildx build <span class="nt">--platform</span><span class="o">=</span>linux/amd64 <span class="nt">-t</span> &lt;tag&gt; <span class="nt">--build-arg</span> <span class="nv">environment</span><span class="o">=</span>&lt;<span class="nb">env</span><span class="o">&gt;</span> <span class="nb">.</span> <span class="nt">--load</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Build &amp; push image directly<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code><span class="nv">$ </span>docker buildx build <span class="nt">--platform</span><span class="o">=</span>linux/amd64 <span class="nt">-t</span> &lt;tag&gt; <span class="nt">--build-arg</span> <span class="nv">environment</span><span class="o">=</span>&lt;<span class="nb">env</span><span class="o">&gt;</span> <span class="nb">.</span> <span class="nt">--push</span>\n</code></pre>\n\n</div>\n\n\n\n',
      media: [],
      originId: 'https://dev.to/anilxnmdrz/docker-build-with-mac-2j9d',
      publishedAt: 1716717393,
      title: 'Docker Build with Mac',
      url: 'https://dev.to/anilxnmdrz/docker-build-with-mac-2j9d',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'aUyc0jY8YyXin6a-_mL5L',
      isLoading: false,
      reading: 'fast',
      full: '<p>Good day, everyone! Today, we\'ll explore how <code>var</code>, <code>let</code>, and <code>const</code> work and how hoisting affects each.</p>\n\n<p>Before we dive in, I recommend reading my blog on execution context for a deeper understanding of hoisting.<br>\n<a href="https://dev.to/sromelrey/javascript-execution-context-and-js-engine-components-1kem">JavaScript Execution Context and JS Engine Components</a></p>\n<h3>\n  \n  \n  Goals and Objectives in this topic:\n</h3>\n\n<ul>\n<li>Understand how <code>var</code>, <code>let</code>, and <code>const</code> works under the hood.</li>\n<li>How hoisting affects each keyword.</li>\n<li>What is Temporal Dead Zone ?</li>\n</ul>\n\n<p>The keyword <code>var</code>, <code>let</code>, and <code>const</code> is what we use when declaring a variable in JavaScript.</p>\n\n<p>Let\'s start with the <code>var</code> keyword before ES6 declaring variable can only be done using <code>var</code> the following are the features of this keyword:</p>\n<h3>\n  \n  \n  <code>var</code> keyword:\n</h3>\n\n<ul>\n<li><p><strong>Function Scope:</strong> Variables declared with <code>var</code> are scoped to the function in which they are declared.</p></li>\n<li><p><strong>Hoisting:</strong> Variables are hoisted to the top of their scope and initialized with <code>undefined</code>.</p></li>\n<li><p><strong>Re-declaration:</strong> The same variable can be declared multiple times within the same scope without causing an error.</p></li>\n<li><p><strong>Global Object Property:</strong> If declared outside a function, var becomes a property of the global object (e.g., window in browsers).</p></li>\n</ul>\n\n<p>The \'let\' and \'const\' keywords are features introduced in ES6, addressing the shortcomings of the \'var\' keyword.<br>\nHere\'s a list of how and what you can use this keywords:</p>\n<h3>\n  \n  \n  <code>let</code> keyword:\n</h3>\n\n<ul>\n<li><p><strong>Block Scope:</strong> Variables declared with <code>let</code> are scoped to the block in which they are declared (e.g., inside a <code>{}</code>).</p></li>\n<li><p><strong>Hoisting:</strong> Variables are hoisted but not initialized, leading to a <strong><em>temporal dead zone</em></strong> until the declaration is encountered.</p></li>\n<li><p><strong>Re-declaration:</strong> Cannot be re-declared within the same scope, preventing accidental redefinitions.</p></li>\n<li><p><strong>Temporal Dead Zone:</strong> Accessing the variable before its declaration results in a Reference Error.</p></li>\n</ul>\n<h3>\n  \n  \n  <code>const</code> keyword:\n</h3>\n\n<ul>\n<li><p><strong>Block Scope:</strong> Variables declared with const are scoped to the block in which they are declared.</p></li>\n<li><p><strong>Hoisting:</strong> Variables are hoisted but not initialized, leading to a <strong><em>temporal dead zone</em></strong> until the declaration is encountered.</p></li>\n<li><p><strong>Re-declaration:</strong> Cannot be re-declared within the same scope, similar to let.</p></li>\n<li><p><strong>Immutability:</strong> Must be initialized at the time of declaration and cannot be reassigned. However, if the variable holds an object, the object\'s properties can still be modified.</p></li>\n<li><p><strong>Temporal Dead Zone:</strong> Accessing the variable before its declaration results in a Reference Error.</p></li>\n</ul>\n<h3>\n  \n  \n  Understanding how hoisting works with different keywords\n</h3>\n\n<p>What is hoisting? Hoisting is a feature in JavaScript that allows you to use variables or invoke functions before they are declared. Here\'s a sample code to illustrate this concept:</p>\n<h5>\n  \n  \n  Here\'s a sample code of hoisting using <code>var</code> and <code>function declaration</code>\n</h5>\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="c1">// * Accessing the \'age\' variable before it is initialized</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>\n<span class="c1">// ? Will log undefined</span>\n\n<span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>\n\n<span class="c1">// * Invoking the \'logAge\' function before it is declared</span>\n<span class="nf">logAge</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>\n<span class="c1">// ? Will log AGE is 12</span>\n\n<span class="c1">// * Invoking logAge Function Declaration before it\'s being declare</span>\n<span class="kd">function</span> <span class="nf">logAge</span><span class="p">(</span><span class="nx">ageArg</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`log AGE is </span><span class="p">${</span><span class="nx">ageArg</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre>\n\n</div>\n\n<h5>\n  \n  \n  Here\'s a sample code of hoisting using <code>let</code> and <code>const</code> and <code>function expression</code>\n</h5>\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="c1">// * Accessing let age before it\'s initialization</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>\n\n<span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>\n\n<span class="c1">// * Invoking logAge Function Expression before it\'s being declare</span>\n<span class="nf">logAge</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>\n\n<span class="kd">let</span> <span class="nx">logAge</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`log AGE is </span><span class="p">${</span><span class="nx">ageArg</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>\n<span class="p">};</span>\n</code></pre>\n\n</div>\n\n\n<blockquote>\n<p>I will write a separate blog post under the topic of functions to further explain how hoisting works with function expressions and function declarations when invoking a function.</p>\n</blockquote>\n<h3>\n  \n  \n  Temporal Dead Zone\n</h3>\n\n<p>The <strong><em>temporal dead zone</em></strong> starts from the block until the <code>let</code> or <code>const</code> variable declaration is processed. In other words, it is the location where you cannot access the let variables before they are defined.</p>\n\n<p>Here\'s a sample code to demonstrate the <strong><em>TDZ</em></strong><br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access \'myVar\' before initialization</span>\n<span class="kd">let</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>\n<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// Output: 10</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Although \'let\' and \'const\' are hoisted, accessing them before their declaration results in a Reference Error, unlike \'var\' which returns undefined. This behavior is known as the \'temporal dead zone."</p>\n</blockquote>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Understanding how var, let, and const work and how hoisting affects each keyword is crucial for writing efficient JavaScript code.</p>\n\n<ul>\n<li>\n<code>var</code> is function-scoped, hoisted, and can be re-declared within the same scope, which can lead to unexpected behaviors.</li>\n<li>\n<code>let</code> and <code>const</code> are block-scoped, also hoisted but not initialized until their declaration, leading to the temporal dead zone which prevents access before initialization.</li>\n<li>\n<code>const</code> also enforces immutability, meaning it must be initialized during declaration and cannot be reassigned.</li>\n</ul>\n\n<p><strong><em>Hoisting</em></strong> allows functions and variables to be used before they are declared, but understanding the nuances between these keywords helps prevent common pitfalls, such as reference errors or unintended variable reassignments. For more details on hoisting with function expressions and declarations, stay tuned for my upcoming blog post. </p>\n\n<p>Thanks for reading üòÅüòÅüòÅüòÅ</p>\n\n',
      media: [],
      originId:
        'https://dev.to/sromelrey/understanding-javascript-keyword-var-let-const-and-hoisting-jhh',
      publishedAt: 1716717110,
      title: 'Understanding JavaScript keyword var, let, const and hoisting.',
      url: 'https://dev.to/sromelrey/understanding-javascript-keyword-var-let-const-and-hoisting-jhh',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'tPyZlHO9MouO_RFRLBNMg',
      isLoading: false,
      reading: 'fast',
      full: '<div class="ltag__stackexchange--container">\n  <div class="ltag__stackexchange--title-container">\n    \n      <div class="ltag__stackexchange--title">\n        <div class="ltag__stackexchange--header">\n          <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoTUKOcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt="">\n          <a href="https://stackoverflow.com/questions/75126245/cannot-read-properties-of-undefined-reading-invalidatestags/77897380#77897380" rel="noopener noreferrer">\n            <span class="title-flare">answer</span> re: Cannot read properties of undefined (reading \'invalidatesTags\')\n          </a>\n        </div>\n        <div class="ltag__stackexchange--post-metadata">\n          <span>Jan 29 \'24</span>\n        </div>\n      </div>\n      <a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/75126245/cannot-read-properties-of-undefined-reading-invalidatestags/77897380#77897380" rel="noopener noreferrer">\n        <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeieW07A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt="">\n        <div class="ltag__stackexchange--score-number">\n          1\n        </div>\n        <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2-sXgSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt="">\n      </a>\n    \n  </div>\n  <div class="ltag__stackexchange--body">\n    \n<p>I solved my problem by following their docs!</p>\n<p><a href="https://redux-toolkit.js.org/rtk-query/api/createApi#reducerpath" rel="nofollow noreferrer">This link will take you exactly where they (RTK docs) talk about it</a></p>\n<blockquote>\n<p>The reducerPath is a unique key that your service will be mounted to in your store. If you call createApi more than once in your application, you will need‚Ä¶</p>\n</blockquote>\n    \n  </div>\n  <div class="ltag__stackexchange--btn--container">\n    <a href="https://stackoverflow.com/questions/75126245/cannot-read-properties-of-undefined-reading-invalidatestags/77897380#77897380" class="ltag__stackexchange--btn" rel="noopener noreferrer">Open Full Answer</a>\n  </div>\n</div>\n\n\n',
      media: [],
      originId:
        'https://dev.to/hossain45/answer-cannot-read-properties-of-undefined-reading-invalidatestags-duplicate-igp',
      publishedAt: 1716716178,
      title:
        "Answer: Cannot read properties of undefined (reading 'invalidatesTags') [duplicate]",
      url: 'https://dev.to/hossain45/answer-cannot-read-properties-of-undefined-reading-invalidatestags-duplicate-igp',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'hCzmb2cdfZ9GJjXP-_9et',
      isLoading: false,
      reading: 'fast',
      full: '<p>In this blog, I will show you how to use the OpenAI Assistant with NextJS.</p>\n\n<h2>\n  \n  \n  What is the OpenAI Assistant?\n</h2>\n\n<p>The OpenAI Assistant is a purpose-built AI that uses OpenAI\'s models and can access files, maintain persistent threads, and call tools. <a href="https://help.openai.com/en/articles/8550641-assistants-api-v2-faq">Reference</a>.</p>\n\n<h2>\n  \n  \n  Let\'s Get Started\n</h2>\n\n<h3>\n  \n  \n  Create Your First Assistant\n</h3>\n\n<ul>\n<li>Prerequisite: You need to have an OpenAI API subscription.\nGo to the <a href="https://platform.openai.com/docs/overview">OpenAI platform</a>, and on the navigation sidebar, click on "Assistant."</li>\n</ul>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fko0anzps5l6gtsu3vkqu.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fko0anzps5l6gtsu3vkqu.png" alt="assistant menu" width="588" height="423"></a></p>\n\n<p>On the assistant page, click "Create your assistant."</p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Foxztkcsf4pp8847f4l5q.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Foxztkcsf4pp8847f4l5q.png" alt="create assistant menu" width="800" height="610"></a></p>\n\n<p>Give it a name and describe what you want your assistant to do. Remember, the more detailed your description is, the more precise the assistant\'s answers will be.</p>\n\n<h3>\n  \n  \n  Create the NextJS UI\n</h3>\n\n<p>I assume you know how to create a NextJS project. In this project, I use NextJS with <a href="https://ui.shadcn.com/">Shadcn UI</a>.</p>\n\n<ul>\n<li>Create the Chat UI\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="dl">"</span><span class="s2">use client</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">import</span> <span class="nx">CustomReactMarkdown</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/CustomMarkdown</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="nx">WithAuth</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/WithAuth</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/ui/button</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">Textarea</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/ui/textarea</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">cloneDeep</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">lodash</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">useForm</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-hook-form</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span>\n  <span class="nx">BotIcon</span><span class="p">,</span>\n  <span class="nx">CircleSlash</span><span class="p">,</span>\n  <span class="nx">SendHorizonalIcon</span><span class="p">,</span>\n  <span class="nx">User</span><span class="p">,</span>\n  <span class="nx">Wand</span><span class="p">,</span>\n<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">lucide-react</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useRef</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="nx">type</span> <span class="nx">Message</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">text</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n  <span class="nl">role</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">register</span><span class="p">,</span> <span class="nx">handleSubmit</span><span class="p">,</span> <span class="nx">reset</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useForm</span><span class="p">();</span>\n\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">chatLogs</span><span class="p">,</span> <span class="nx">setChatLogs</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">Message</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([]);</span>\n  <span class="kd">const</span> <span class="nx">chatRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>\n  <span class="kd">const</span> <span class="nx">lastMessage</span> <span class="o">=</span> <span class="nx">chatLogs</span><span class="p">?.[</span><span class="nx">chatLogs</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]?.</span><span class="nx">text</span><span class="p">;</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">processing</span><span class="p">,</span> <span class="nx">setProcessing</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">isTyping</span><span class="p">,</span> <span class="nx">setIsTyping</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n\n  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="k">if </span><span class="p">(</span><span class="nx">chatRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">chatRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nf">scrollTo</span><span class="p">({</span>\n        <span class="na">top</span><span class="p">:</span> <span class="nx">chatRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">scrollHeight</span><span class="p">,</span>\n        <span class="na">behavior</span><span class="p">:</span> <span class="dl">"</span><span class="s2">smooth</span><span class="dl">"</span><span class="p">,</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">},</span> <span class="p">[</span><span class="nx">lastMessage</span><span class="p">]);</span>\n\n  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">async </span><span class="p">(</span><span class="nx">data</span><span class="p">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">prompt</span><span class="p">;</span>\n    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">prompt</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="nf">setProcessing</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>\n      <span class="nf">setChatLogs</span><span class="p">((</span><span class="nx">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span>\n        <span class="p">...</span><span class="nx">prev</span><span class="p">,</span>\n        <span class="p">{</span>\n          <span class="na">text</span><span class="p">:</span> <span class="nx">prompt</span><span class="p">,</span>\n          <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">user</span><span class="dl">"</span><span class="p">,</span>\n        <span class="p">},</span>\n      <span class="p">]);</span>\n      <span class="kd">const</span> <span class="nx">formdata</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FormData</span><span class="p">();</span>\n      <span class="nx">formdata</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span><span class="p">,</span> <span class="nx">prompt</span><span class="p">);</span>\n      <span class="nf">reset</span><span class="p">();</span>\n\n      <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">/api/assistant</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>\n        <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>\n        <span class="na">body</span><span class="p">:</span> <span class="nx">formdata</span><span class="p">,</span>\n      <span class="p">});</span>\n\n      <span class="kd">const</span> <span class="nx">reader</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">?.</span><span class="nf">pipeThrough</span><span class="p">(</span><span class="k">new</span> <span class="nc">TextDecoderStream</span><span class="p">()).</span><span class="nf">getReader</span><span class="p">();</span>\n\n      <span class="k">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kd">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">reader</span><span class="p">?.</span><span class="nf">read</span><span class="p">())</span> <span class="k">as</span> <span class="p">{</span>\n          <span class="na">done</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>\n          <span class="nl">value</span><span class="p">:</span> <span class="nx">any</span><span class="p">;</span>\n        <span class="p">};</span>\n\n        <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nf">setIsTyping</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n          <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n\n        <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n          <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">?.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">in_progress</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>\n            <span class="nf">setProcessing</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n          <span class="p">}</span>\n          <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">?.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>\n            <span class="nf">setIsTyping</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n          <span class="p">}</span>\n          <span class="kd">let</span> <span class="nx">content</span><span class="p">;</span>\n          <span class="kd">const</span> <span class="nx">cleanedString</span> <span class="o">=</span> <span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">;</span>\n          <span class="nx">content</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">cleanedString</span><span class="p">);</span>\n\n          <span class="k">if </span><span class="p">(</span><span class="nx">content</span><span class="p">?.</span><span class="nx">event</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">thread.message.delta</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>\n            <span class="k">if </span><span class="p">(</span><span class="nx">processing</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nf">setProcessing</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n            <span class="p">}</span>\n            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">isTyping</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nf">setIsTyping</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>\n            <span class="p">}</span>\n            <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">content</span><span class="p">?.</span><span class="nx">data</span><span class="p">?.</span><span class="nx">delta</span><span class="p">?.</span><span class="nx">content</span><span class="p">?.[</span><span class="mi">0</span><span class="p">]?.</span><span class="nx">text</span><span class="p">?.</span><span class="nx">value</span> <span class="o">??</span> <span class="dl">""</span><span class="p">;</span>\n            <span class="nf">setChatLogs</span><span class="p">((</span><span class="nx">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n              <span class="kd">const</span> <span class="nx">newLogs</span> <span class="o">=</span> <span class="nf">cloneDeep</span><span class="p">(</span><span class="nx">prev</span><span class="p">);</span>\n              <span class="kd">const</span> <span class="nx">lastMessage</span> <span class="o">=</span> <span class="nx">newLogs</span><span class="p">?.[</span><span class="nx">newLogs</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>\n              <span class="k">if </span><span class="p">(</span><span class="nx">lastMessage</span><span class="p">?.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">assistant</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>\n                <span class="nx">lastMessage</span><span class="p">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="nx">text</span><span class="p">;</span>\n              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n                <span class="nx">newLogs</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span>\n                  <span class="nx">text</span><span class="p">,</span>\n                  <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">assistant</span><span class="dl">"</span><span class="p">,</span>\n                <span class="p">});</span>\n              <span class="p">}</span>\n              <span class="k">return</span> <span class="nx">newLogs</span><span class="p">;</span>\n            <span class="p">});</span>\n          <span class="p">}</span>\n        <span class="p">}</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n  <span class="p">};</span>\n\n  <span class="k">return </span><span class="p">(</span>\n    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">relative  max-w-7xl mx-auto min-h-[calc(100vh-80px)]</span><span class="dl">"</span><span class="o">&gt;</span>\n      <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-xl sm:text-2xl text-center mt-2 relative </span><span class="dl">"</span><span class="o">&gt;</span>\n        <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex items-center space-x-2 justify-center</span><span class="dl">"</span><span class="o">&gt;</span>\n          <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="nx">Recipe</span> <span class="nx">Assistant</span> <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>          <span class="o">&lt;</span><span class="nx">BotIcon</span> <span class="nx">color</span><span class="o">=</span><span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span> <span class="o">/&gt;</span>\n        <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="nx">div</span>\n        <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">chatRef</span><span class="p">}</span>\n        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">overflow-y-auto mt-2 sm:mt-4 p-3 sm:p-8 rounded-lg no-scrollbar h-[calc(100vh-230px)]</span><span class="dl">"</span>\n      <span class="o">&gt;</span>\n        <span class="p">{</span><span class="nx">chatLogs</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">log</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span>\n          <span class="nx">log</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">user</span><span class="dl">"</span> <span class="p">?</span> <span class="p">(</span>\n            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">relative p-2 sm:p-6</span><span class="dl">"</span><span class="o">&gt;</span>\n              <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-gray-500</span><span class="dl">"</span><span class="o">&gt;</span>\n                <span class="o">&lt;</span><span class="nx">User</span>\n                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:absolute left-0 sm:-translate-x-[120%]</span><span class="dl">"</span>\n                  <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">27</span><span class="p">}</span>\n                <span class="sr">/</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">bg</span><span class="o">-</span><span class="nx">gray</span><span class="o">-</span><span class="mi">50</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">log</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>          <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">relative </span><span class="dl">"</span><span class="o">&gt;</span>\n              <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-gray-500 </span><span class="dl">"</span><span class="o">&gt;</span>\n                <span class="o">&lt;</span><span class="nx">BotIcon</span>\n                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:absolute left-0 sm:-translate-x-[120%]</span><span class="dl">"</span>\n                  <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">27</span><span class="p">}</span>\n                <span class="sr">/</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="nx">CustomReactMarkdown</span>\n                <span class="nx">content</span><span class="o">=</span><span class="p">{</span><span class="nx">log</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>\n                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">p-2 sm:p-6  bg-gray-100 my-3</span><span class="dl">"</span>\n              <span class="o">/&gt;</span>\n            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>          <span class="p">)</span>\n        <span class="p">)}</span>\n        <span class="p">{</span><span class="nx">processing</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>\n          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex items-center space-x-2</span><span class="dl">"</span><span class="o">&gt;</span>\n            <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">animate-spin </span><span class="dl">"</span><span class="o">&gt;</span>\n              <span class="o">&lt;</span><span class="nx">CircleSlash</span> <span class="o">/&gt;</span>\n            <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>        <span class="p">)}</span>\n      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">absolute w-full left-0 bottom-0 text-sm</span><span class="dl">"</span><span class="o">&gt;</span>\n        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">w-10/12 mx-auto sm:hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>        <span class="o">&lt;</span><span class="nx">form</span>\n          <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="nf">handleSubmit</span><span class="p">(</span><span class="nx">onSubmit</span><span class="p">)}</span>\n          <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex gap-4 w-10/12  mx-auto  relative </span><span class="dl">"</span>\n        <span class="o">&gt;</span>\n          <span class="o">&lt;</span><span class="nx">Textarea</span>\n            <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-sm sm:text-md md:text-xl px-8 sm:px-4</span><span class="dl">"</span>\n            <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">I use the XS-10 camera. I will take pictures of a female model at 6 AM.</span><span class="dl">"</span>\n            <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span>\n            <span class="p">{...</span><span class="nf">register</span><span class="p">(</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span><span class="p">)}</span>\n            <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n              <span class="k">if </span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Enter</span><span class="dl">"</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">shiftKey</span><span class="p">)</span> <span class="p">{</span>\n                <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>\n                <span class="nf">handleSubmit</span><span class="p">(</span><span class="nx">onSubmit</span><span class="p">)();</span>\n              <span class="p">}</span>\n            <span class="p">}}</span>\n          <span class="sr">/</span><span class="err">&gt;\n</span>          <span class="o">&lt;</span><span class="nx">Button</span>\n            <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">sm</span><span class="dl">"</span><span class="p">}</span>\n            <span class="nx">variant</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">link</span><span class="dl">"</span><span class="p">}</span>\n            <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span>\n            <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">absolute right-0 sm:right-3 px-1 sm:px-3 top-1/2 -translate-y-1/2</span><span class="dl">"</span>\n            <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="nx">processing</span> <span class="o">||</span> <span class="o">!</span><span class="nx">prompt</span> <span class="o">||</span> <span class="nx">isTyping</span><span class="p">}</span>\n          <span class="o">&gt;</span>\n            <span class="o">&lt;</span><span class="nx">SendHorizonalIcon</span> <span class="o">/&gt;</span>\n          <span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;\n</span>        <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This is my UI</p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feh2wxr1av1y1undck57l.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feh2wxr1av1y1undck57l.png" alt="chat ui" width="800" height="568"></a></p>\n\n<h3>\n  \n  \n  Create the API Route\n</h3>\n\n<p>First, you need to install the OpenAI package:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code>npm i openai\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>The API route code example:\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="k">import</span> <span class="nx">OpenAI</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">openai</span><span class="dl">\'</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">NextRequest</span><span class="p">,</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">next/server</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">openai</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OpenAI</span><span class="p">({</span>\n  <span class="na">apiKey</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">[</span><span class="dl">\'</span><span class="s1">OPENAI_API_KEY</span><span class="dl">\'</span><span class="p">],</span>\n<span class="p">});</span>\n\n<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">POST</span><span class="p">(</span><span class="nx">req</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">,</span> <span class="nx">res</span><span class="p">:</span> <span class="nx">NextResponse</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">formData</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">req</span><span class="p">.</span><span class="nf">formData</span><span class="p">())</span> <span class="k">as</span> <span class="nx">any</span><span class="p">;</span>\n  <span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="p">(</span><span class="nx">formData</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span><span class="p">)</span> <span class="k">as</span> <span class="nx">string</span><span class="p">)</span> <span class="o">??</span> <span class="dl">\'\'</span><span class="p">;</span>\n  <span class="kd">const</span> <span class="nx">thread</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nx">beta</span><span class="p">.</span><span class="nx">threads</span><span class="p">.</span><span class="nf">create</span><span class="p">();</span>\n  <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nx">beta</span><span class="p">.</span><span class="nx">threads</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>\n    <span class="nx">thread</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>\n    <span class="p">{</span>\n      <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">user</span><span class="dl">"</span><span class="p">,</span>\n      <span class="na">content</span><span class="p">:</span> <span class="nx">prompt</span><span class="p">,</span>\n    <span class="p">}</span>\n  <span class="p">);</span>\n  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nx">beta</span><span class="p">.</span><span class="nx">threads</span><span class="p">.</span><span class="nx">runs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nx">thread</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span>\n    <span class="na">assistant_id</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">[</span><span class="dl">\'</span><span class="s1">OPENAI_ASSISTANT_ID</span><span class="dl">\'</span><span class="p">]</span> <span class="k">as</span> <span class="nx">string</span><span class="p">,</span>\n    <span class="na">stream</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>\n  <span class="p">});</span>\n  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">toReadableStream</span><span class="p">();</span>\n\n  <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="p">{</span>\n    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>\n      <span class="dl">\'</span><span class="s1">Content-Type</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">text/plain</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="dl">\'</span><span class="s1">Transfer-Encoding</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">chunked</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="dl">\'</span><span class="s1">Connection</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">keep-alive</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="p">},</span>\n  <span class="p">});</span>\n<span class="p">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here is my own fujifilm recipes assistant <a href="https://fujixfilm.com/assistant">fujifilm assistant</a></p>\n\n<p>And that\'s it! Create your own assistant and make it work. If you have any questions, feel free to drop a comment below.</p>\n\n<p>Thanks and happy coding!</p>\n\n',
      media: [],
      originId: 'https://dev.to/nhd2106/openai-assistant-with-nextjs-1c1n',
      publishedAt: 1716715540,
      title: 'OpenAI Assistant with NextJS',
      url: 'https://dev.to/nhd2106/openai-assistant-with-nextjs-1c1n',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'I64cNsN0akCoKlqsd5JKT',
      isLoading: false,
      reading: 'fast',
      full: '<h2>\n  \n  \n  Why?\n</h2>\n\n<p>Most of my articles so far have been slightly heavy on the more technical side, this is what is looking like my fort√©. I find writing code and solving different problems really interesting.<br>\nOFC solving problems, especially while hacking comes with a fair degree of uncertainty and frustration...when things go wrong or simply everything turns into a big ol\' rabbit hole. </p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fb9kymrwjl2a0jn6zgsgd.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fb9kymrwjl2a0jn6zgsgd.png" alt="The Matrix Morpheus - how deep does the rabbit hole go?" width="662" height="382"></a></p>\n\n<p>I am not 100% certain whether the frustration comes from not being able to finish projects or from the perceived inability to stick to a self-imposed (albeit artificial) deadline.</p>\n\n<p>So this time you will be reading some of my musings about estimations and some interesting aspects that can be found in a <a href="https://www.amazon.com/How-Big-Things-Get-Done/dp/0593239512">recent book</a> I read that put some things into perspective for me.</p>\n\n<h2>\n  \n  \n  How?\n</h2>\n\n<p>I have been trying for years to get close to delivering something on time. The bigger the project the more likely it is to veer off track.<br>\nThe way you can get to near perfectly predictable timelines is if all the pieces in your project can be estimated with razor sharp precision and the way they will all fit together in the finished product.<br>\nEvery part needs to be standard and should fit together like off the shelf components, not only that the different components need to fit together well at the end.<br>\nThe book gives some statistics across projects of how often they are on time, on quality and budget, the number is dismally low across the projects that were analyzed in the book - <strong>only 0.5%</strong>.<br>\nThere are some giant scale projects that have succeeded like the Empire State Building and the Guggenheim in Bilbao. The approach that seems to work well for removing the guess work is building the parts before the whole and using tried and tested solutions.</p>\n\n<h2>\n  \n  \n  Where does it go wrong?\n</h2>\n\n<p>In software engineering mistakes are not as irrecoverable as building a physical structure wrong, of course as the impact of software systems grows the line is more and more blurred.<br>\nYou can image there may come a time when the resilience of software will become as important as that of our homes...or maybe it already is and we just are unable to wrap our heads around it.<br>\nMost project examples described are delayed because of several reasons.</p>\n\n<ul>\n<li>the initial assumption are vague and contain hidden complexity while sounding very simple and clear</li>\n<li>the finished product looks slick and polished, catches the eye, but the architectural feasibility is not assessed beforehand</li>\n<li>optimistic estimates</li>\n<li>doing something that has never been done before</li>\n<li>the human factor</li>\n<li>inexperience</li>\n<li>unknown unknowns</li>\n</ul>\n\n<h2>\n  \n  \n  My A-HA moment\n</h2>\n\n<p>I had not been able to formalize this, and had not come across a term that resonated with me until I read a case study in the <em>"How big things get done"</em> by Bent Flyvbjerg and Dan Gardner.<br>\nThe story refers to a newspaper columnist that engages in writing a biography. His estimate was based on his experience of writing particularly long articles. This prior experience bias is called an "anchor".<br>\nIn the story the writer estimates the biography of ~17 chapters at 9 months to a year, using as an anchor estimate the fact that one long article takes 3 weeks to research and write. Needless to say this estimate was off by a factor of 7. In the end it took 7 years.<br>\nThe story does have a happy end in his case however this is an outlier among the various case studies.<br>\nIt turns out that anchors are a very common pattern we use for estimating how long something will take.<br><br>\nTypically we try to find similarities within our prior experience. The catch with software projects is that technology evolves so quickly and company/team culture is so unique that it makes anchors very much a guesstimation rule of thumb rather than a rigorous framework you might use.<br>\nThere are the extrinsic aspects that change and of course there are the intrinsic goals such as writing better code, designing better architectures and products, faster development whatever motivates you.<br>\nNow, given all these things that evolve over time, what would you think the probability of your experience with something in the past would equate to your estimates being accurate for a similar project two years in the future in a different company?<br><br>\nOne thing that works is breaking the project down into decent sized components and experiment on building the components, and make the project about putting things together.<br>\nYou want to work with pretty large components, yet small enough that the experiments churn out fast. It\'s a balancing act but in the end solving a puzzle with 1000 pieces is much harder than one with 5.<br>\nI think Agile came out of this need for faster iteration and predictability...but in the end the probability of an estimate to be accurate to the minute is very low.</p>\n\n<h2>\n  \n  \n  Conclusions\n</h2>\n\n<ul>\n<li>projects are a sum of experiments</li>\n<li>projects are an aggregate of the experiences of the participants</li>\n<li>boring technology is easier to estimate</li>\n<li>avoiding employee churn helps with estimating projects</li>\n</ul>\n\n',
      media: [],
      originId:
        'https://dev.to/adaschevici/why-i-still-struggle-with-estimates-357k',
      publishedAt: 1716715200,
      title: 'Why I still struggle with estimates',
      url: 'https://dev.to/adaschevici/why-i-still-struggle-with-estimates-357k',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: '-VgqQZTlt5agh_FiyLzxB',
      isLoading: false,
      reading: 'fast',
      full: '<div class="ltag__stackexchange--container">\n  <div class="ltag__stackexchange--title-container">\n    \n      <div class="ltag__stackexchange--title">\n        <div class="ltag__stackexchange--header">\n          <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoTUKOcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt="">\n          <a href="https://stackoverflow.com/questions/72773150/how-i-can-count-how-many-times-my-component-rendered-in-a-react-component/78534775#78534775" rel="noopener noreferrer">\n            <span class="title-flare">answer</span> re: How I can count how many times my component rendered in a react component\n          </a>\n        </div>\n        <div class="ltag__stackexchange--post-metadata">\n          <span>May 26 \'24</span>\n        </div>\n      </div>\n      <a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/72773150/how-i-can-count-how-many-times-my-component-rendered-in-a-react-component/78534775#78534775" rel="noopener noreferrer">\n        <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeieW07A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt="">\n        <div class="ltag__stackexchange--score-number">\n          0\n        </div>\n        <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2-sXgSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt="">\n      </a>\n    \n  </div>\n  <div class="ltag__stackexchange--body">\n    \n<p>If you are working on a big project, create a custom hook. In this way, u can tackle unnecessary renders.</p>\n<p>Creating Custom Hook for renderCount.</p>\n<pre><code>import { useRef, useEffect } from "react"\nexport default () =&gt; {\n  const renderCount = useRef(0);\n  useEffect(() =&gt; {\n    renderCount.current++;\n  });\n  return renderCount.current;\n};\n</code></pre>\n<p>then‚Ä¶</p>\n    \n  </div>\n  <div class="ltag__stackexchange--btn--container">\n    <a href="https://stackoverflow.com/questions/72773150/how-i-can-count-how-many-times-my-component-rendered-in-a-react-component/78534775#78534775" class="ltag__stackexchange--btn" rel="noopener noreferrer">Open Full Answer</a>\n  </div>\n</div>\n\n\n',
      media: [],
      originId:
        'https://dev.to/hossain45/answer-how-i-can-count-how-many-times-my-component-rendered-in-a-react-component-1nmc',
      publishedAt: 1716714539,
      title:
        'Answer: How I can count how many times my component rendered in a react component',
      url: 'https://dev.to/hossain45/answer-how-i-can-count-how-many-times-my-component-rendered-in-a-react-component-1nmc',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'zLXqYmRttPsiCIbU6J-Px',
      isLoading: false,
      reading: 'fast',
      full: '<h2>\n  \n  \n  Reducing Latency and Improves Performance\n</h2>\n\n<p>The distance between the client and the API server is likely longer than between the rendering server and the API server because the rendering server and the API server are mostly located at the same data center, while the client and the API server communicate over the internet. Therefore, data fetching from the server has lower latency.</p>\n\n<h3>\n  \n  \n  Data fetching from the client\n</h3>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>Client                  Rendering Server         API Server\n   |                       |                      |\n   |--Request HTML--------&gt;|                      |\n   |                       |                      |\n   |&lt;--Response HTML-------|                      |\n   |                       |                      |\n   |--Request Data-------------------------------&gt;| (Long distance over internet)\n   |                       |                      |\n   |                       |                      |\n   |&lt;--Response Data------------------------------| (Long distance over internet)\n   |                       |                      |\n   |                       |                      |\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Data fetching from the server\n</h3>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>Client                  Rendering Server         API Server\n   |                       |                      |\n   |--Request HTML--------&gt;|                      |\n   |                       |--Request Data-------&gt;| (Short distance within region)\n   |                       |                      |\n   |                       |&lt;--Response Data------| (Short distance within region)\n   |                       |                      |\n   |&lt;--Response HTML (with data)------------------|\n   |                       |                      |\n</code></pre>\n\n</div>\n\n\n\n<p><strong>However, note that your next.js server and API server might not be to each other if you deployed them on different cloud service providers.</strong> These cloud service providers are physically located in separate places and don\'t even have optimized network connections. This means the latency might not reduce, and performance doesn\'t improve dramatically. Let\'s take an extreme example. Imagine you deployed next.js on vercel and node.js server on Google Cloud. Vercel might deploy your server in Florida while Google Cloud might deploy your server in Paris. The connection between AWS and Vercel is not optimized and the distance is long, causing a lot of latency even though you fetch data from the server.</p>\n\n<h3>\n  \n  \n  Fetching from the server\n</h3>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>Client                  Rendering Server (CSP1 Region1)         API Server (CSP1 Region1)\n   |                       |                                      |\n   |--Request HTML--------&gt;|                                      |\n   |                       |--Request Data-----------------------&gt;|\n   |                       |                                      |\n   |                       |&lt;--Response Data----------------------|\n   |&lt;--Response HTML (with data)----------------------------------|\n   |                       |                                      |\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Fetching from the server with a long distance\n</h3>\n\n\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>Client                  Rendering Server (CSP1 Region1)         API Server (CSP2 Region2)\n   |                       |                                      |\n   |--Request HTML--------&gt;|                                      |\n   |                       |                                      |\n   |                       |--Request Data-----------------------&gt;| (Long distance over the internet)\n   |                       |                                      |\n   |                       |&lt;--Response Data----------------------| (Long distance over the internet)\n   |&lt;--Response HTML (with data)----------------------------------|\n   |                       |                                      |\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Keep your main thread less busy\n</h3>\n\n<p>By default, the browser uses a single thread to execute JavaScript and perform layout, reflows, and garbage collection. If event processing and painting get delayed, users are probably not happy with using our website. Data fetching from the server can help the main thread with these jobs, making our website more responsive.</p>\n\n<ul>\n<li>Initializing requests and processing responses.</li>\n<li>Rendering HTML</li>\n</ul>\n\n<h2>\n  \n  \n  Request Memoization\n</h2>\n\n<ul>\n<li>\n</li>\n</ul>\n\n<h2>\n  \n  \n  Data Cache\n</h2>\n\n<ul>\n<li>\n</li>\n</ul>\n\n<h2>\n  \n  \n  Full Route Cache\n</h2>\n\n<ul>\n<li>Full Route Cache doesn\'t cache a route, using dynamic functions like <code>cookies</code>, <code>headers</code>, or <code>searchParams</code>. However, Data Cache still caches the requests sent by the route.</li>\n<li>Full Route Cache caches a route even if the path has Dynamic Segment at request time.</li>\n</ul>\n\n<h2>\n  \n  \n  Router Cache\n</h2>\n\n<ul>\n<li>\n</li>\n</ul>\n\n<h2>\n  \n  \n  Route Handlers\n</h2>\n\n<ul>\n<li>Route Handlers don\'t cache <code>Response</code> if they use dynamic functions.</li>\n</ul>\n\n<p><a href="https://nextjs.org/docs/app/building-your-application/caching#opting-out-2">https://nextjs.org/docs/app/building-your-application/caching#opting-out-2</a><br>\n<a href="https://nextjs.org/docs/app/building-your-application/caching#generatestaticparams">https://nextjs.org/docs/app/building-your-application/caching#generatestaticparams</a></p>\n\n<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Main_thread">https://developer.mozilla.org/en-US/docs/Glossary/Main_thread</a></p>\n\n',
      media: [],
      originId: 'https://dev.to/algoorgoal/benefits-of-nextjs-3l9p',
      publishedAt: 1716714465,
      title: 'Benefits of Next.js',
      url: 'https://dev.to/algoorgoal/benefits-of-nextjs-3l9p',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'PUblUCPrg26VKl-WtFtym',
      isLoading: false,
      reading: 'fast',
      full: '<p><em>This is a submission for the <a href="https://dev.to/challenges/awschallenge">The AWS Amplify Fullstack TypeScript Challenge </a></em></p>\n\n<h2>\n  \n  \n  What I Built\n</h2>\n\n<p><a href="https://www.ripe.money/">Ripe</a> enables users to pay everyday merchants with crypto. Payment using QR code is ubiquitous in many parts of the world. (In the US, think Venmo.) Ripe leverages this existing payment infrastructure by connecting crypto on top of it.</p>\n\n<p>I built the frontend to capture QR code using a phone\'s camera. It parses the QR code to extract merchant information such as name. (Right now it only supports GCash QR code in the Philippines, but more are coming.) It then asks the user the amount to send. The information is submitted to a data backend and triggers a serverless function to process the payment.</p>\n\n<h2>\n  \n  \n  Demo\n</h2>\n\n<p><a href="https://pay.ripe.money/">https://pay.ripe.money/</a></p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmct0htq6vnjfuz8ad7fz.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmct0htq6vnjfuz8ad7fz.png" alt="Image description" width="694" height="1398"></a><br>\n<a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhz7746hruyjwl0tfgbsb.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhz7746hruyjwl0tfgbsb.png" alt="Image description" width="694" height="1398"></a><br>\n<a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Far7oe8q4ukverf6wgbz7.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Far7oe8q4ukverf6wgbz7.png" alt="Image description" width="694" height="1398"></a><br>\n<a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7hwus48jecw7tplr1jvm.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7hwus48jecw7tplr1jvm.png" alt="Image description" width="694" height="1398"></a></p>\n\n<h2>\n  \n  \n  Journey\n</h2>\n\n<p>Even though we\'re only at the beginning, we have ambitious plans for this project long term. It will be very sophisticated and will require the infrastructure to fully build out a financial services company, so choosing AWS gives us that long-term option.</p>\n\n<p>However, we also want to iterate quickly to get user feedback and improve the user experience, so we didn\'t want to spend too much time managing infrastructure. I had used Amplify gen1 before so I knew it had what we needed while also can provide integration down the line with other AWS services. When I saw Amplify gen2 and how it improved the developer experience further, it was a no brainer.</p>\n\n<p>When I first started building this, Amplify Hosting gen2 didn\'t support custom domain yet. I knew the feature existed in gen1, so it\'s only a matter of time before it\'s available in gen2. Sure enough, before I even finished the frontend the feature was released. So now the site is reachable at <a href="https://pay.ripe.money/">https://pay.ripe.money/</a></p>\n\n<p>Typescript support is also really useful, as I can export the correct typing to the frontend (Nextjs typescript) automatically from the schema in the data backend. The consistency is ensured automatically.</p>\n\n<p><strong>Connected Components and/or Feature Full</strong></p>\n\n<p>Of the four features (data, authentication, serverless functions, and file storage), we used all of them, although authentication and file storage are used only with the development team (see below).</p>\n\n<p>Payment information submitted by the user is sent to the data backend (<strong>AppSync</strong> and <strong>DynamoDB</strong>), which triggers a serverless function (<strong>Lambda</strong>) to process the transaction.</p>\n\n<p>For the development team, they can authenticate and authorize themselves (<strong>Cognito</strong>) to access some hidden features. One of which is for capturing a photo of QR code that the app fails to parse. This is uploaded to file storage (<strong>S3</strong>) for later analysis.</p>\n\n<p>&lt;!-- Thanks for participating! ‚Üí</p>\n\n',
      media: [],
      originId:
        'https://dev.to/chucklam/scan-and-parse-payment-qr-codes-with-aws-amplify-gen-2-11gd',
      publishedAt: 1716714215,
      title: 'Scan and Parse Payment QR Codes with AWS Amplify Gen 2',
      url: 'https://dev.to/chucklam/scan-and-parse-payment-qr-codes-with-aws-amplify-gen-2-11gd',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'nhP8oodrBg0kOh58ikFel',
      isLoading: false,
      reading: 'fast',
      full: '<p><em>This is a submission for the <a href="https://dev.to/challenges/awschallenge">The AWS Amplify Fullstack TypeScript Challenge </a></em></p>\n\n<h2>\n  \n  \n  What I Built\n</h2>\n\n<p>I built an application that helps users find the DC Bat Cowls trait rarity using <a href="https://aws.amazon.com/amplify/">Amplify Gen 2 with Typescript</a>. What a Bat Cowl is can be found <a href="https://www.dc.com/blog/2022/03/29/the-bat-cowl-collection-one-epic-drop">here</a>. The marketplace for them is <a href="https://www.candy.com/dc/marketplace?collection=%5B%22The+Bat+Cowl+Collection%22%5D">here</a>. Summary on Bat Cowls is a really cool project that has enabled me to create our own DC Comic... and created our own super villain within the DC Universe. </p>\n\n<h2>\n  \n  \n  Demo\n</h2>\n\n<p>You can view a Live Demo of the application here:<br>\n<a href="https://www.dcbatcowls.com">https://www.dcbatcowls.com</a></p>\n\n<p>Git Repository: <br>\n<a href="https://github.com/markramrattan/dcbatcowls">https://github.com/markramrattan/dcbatcowls</a></p>\n\n\n<h2>\n  \n  \n  Journey\n</h2>\n\n<p>My process (journey) involved spending the Amplify Gen 2 release week soaking up all the information. That was wild!ü§™ and an incredible insight into the BIG steps forward the AWS Amplify team is making. I could probably write 5 blogs... on all the AWS AMPLIFY updates üòÇ (Yes it\'s capitalised for a reason aka it\'s AMPLIFIED...) though if you want to read what\'s new check out these two blogs: </p>\n\n<p><a href="https://aws.amazon.com/blogs/mobile/team-workflows-amplify/">https://aws.amazon.com/blogs/mobile/team-workflows-amplify/</a></p>\n\n<p><a href="https://aws.amazon.com/blogs/mobile/new-in-aws-amplify-integrate-with-sql-databases-oidc-saml-providers-and-the-aws-cdk/">https://aws.amazon.com/blogs/mobile/new-in-aws-amplify-integrate-with-sql-databases-oidc-saml-providers-and-the-aws-cdk/</a></p>\n\n<p>First thing I did was do the Quickstart during the Amplify Gen 2 release week. That template gives you a fast and quick (hands-on) insight on the new features. If you want to check it out, it\'s <a href="https://docs.amplify.aws/nextjs/start/quickstart/">here</a>. I used the NextJS App  Router version.</p>\n\n<p>What\'s weird or interesting is my own development journey has switched to NextJS and Typescript. Then this pops up... with AWS Amplify Gen 2 using a TypeScript-based, code-first developer experience (DX) for defining backends. </p>\n\n<p><em>The Gen 2 DX offers a unified Amplify developer experience with hosting, backend, and UI-building capabilities and a code-first approach.</em></p>\n\n<p>I think that means... I am a *<em>Full Stack developer... *</em> I remember back in the days of putting Front-end Developer on my C.V. üòÜ Those days are LONG goneüí® I am enjoying this Full Stack Developer experience. A great understanding of how Amplify works is the concepts section (probably a great place to start). The page has a great overview on how to reframe your mind on what it currently is now: </p>\n\n<p><a href="https://docs.amplify.aws/nextjs/how-amplify-works/concepts/">https://docs.amplify.aws/nextjs/how-amplify-works/concepts/</a></p>\n\n<p>This diagram from the page above is great to visually understand the constructs:</p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fygc5dz8i9zje5zs3doy3.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fygc5dz8i9zje5zs3doy3.png" alt="AWS Amplify Concept" width="800" height="547"></a></p>\n\n<p>Ok, enough theory! We did the reading, let\'s build and participate in this Amplify Gen 2 challenge. The initial Base of the project is the quickstart template. Sometimes it\'s better to not start from a blank canvas. Gutted it out and started working on my data models... How was I going to store the data, What would it look like... Would users find it beneficial being in that format. Reflecting, probably done it the wrong way around. I should of spent more time with users and work backwards. Though... this project is still in development and i\'ll continue to work on it after the challenge is done. </p>\n\n<p>I really enjoyed learning about constructing the data model. I am used to Amplify Studio and doing it the visual way and this is a big change for me. I found it a better experience (code first)... which is weird (as I am a more visual person). </p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmpy78t7p2u0q8lkx0c5g.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmpy78t7p2u0q8lkx0c5g.png" alt="Data Model" width="800" height="786"></a></p>\n\n<p>After spending time working out the model. I used the data manager to input the data needed. I wish there was a way to add the data in bulk (i.e.) upload this csv, reformat it and populate it in the tables (there probably is... if you know how, drop a comment or tag me). Though saying that, when the Bat Cowls get re-minted on the blockchain, i\'ll probably use the API to populate the data. </p>\n\n<p>Connecting up the model to the Front UI was fun. I used tailwind, I am reverted to what I know (not always best), though I was able to quickly design it and push out something cool! üòé </p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fohytj99m3hxdcvtwbi6c.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fohytj99m3hxdcvtwbi6c.png" alt="Main Page" width="800" height="722"></a></p>\n\n<p>Yes the different traits are clickable and it takes you to more details (rarity).</p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ffpzbj8uyat2qi03bloqw.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ffpzbj8uyat2qi03bloqw.png" alt="Material 2 Page" width="800" height="597"></a></p>\n\n<p>For me, this looks Cool! üòé and built SO FASTüí® Normally take me at least a month to get it to this level. Instead it\'s increased my speed of development. I used the Amazon Q with Amplify integration! That shizzle is SOO GOOD! I would say it\'s a 10x improvement in development speed (for me). Though lots still to learn! and excited about integrating more user benefits. </p>\n\n<p>I also added a Web3 wallet from <a href="https://thirdweb.com/">ThirdWeb</a> so users in the future will be able to connect their Bat Cowls to the application. Great integration and has the ability to specify wallets and restrict usage to particular blockchains.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="o">&lt;</span><span class="nx">ConnectButton</span>\n     <span class="nx">client</span><span class="o">=</span><span class="p">{</span><span class="nx">client</span><span class="p">}</span>\n     <span class="nx">wallets</span><span class="o">=</span><span class="p">{</span><span class="nx">wallets</span><span class="p">}</span>\n     <span class="nx">chain</span><span class="o">=</span><span class="p">{</span><span class="nf">defineChain</span><span class="p">(</span><span class="mi">11297108109</span><span class="p">)}</span><span class="o">&gt;</span>\n<span class="o">&lt;</span><span class="sr">/ConnectButton</span><span class="err">&gt;\n</span></code></pre>\n\n</div>\n\n\n\n<p>I didn\'t add the full four connected components (Data / Authentication / Serverless Function / File Storage). Just Data component for this project. I could easily add the other three. However, I tried to make this about self learning and improvement aligned to building something of benefit to the user. </p>\n\n<p>Going forward (continuously learning), i\'ll definitely be integrating more components when needed for user benefit. </p>\n\n<p>Thank you for reading my blog. Feel free to check out what i\'ve created. All feedback is welcome üòé</p>\n\n',
      media: [],
      originId:
        'https://dev.to/aws-builders/dc-bat-cowls-with-amplify-gen-2-fullstack-typescript-43ac',
      publishedAt: 1716713999,
      title: 'DC Bat Cowls with Amplify Gen 2 Fullstack Typescript',
      url: 'https://dev.to/aws-builders/dc-bat-cowls-with-amplify-gen-2-fullstack-typescript-43ac',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'QG9TMqaBIEPy0LuAr6nyZ',
      isLoading: false,
      lastOriginId:
        'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
      lastPublishedAt: 1716718666,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      loader: 'rss',
      reading: 'fast',
      title: 'DEV Community',
      url: 'https://dev.to/feed'
    },
    post: {
      id: 'Y5vKxUe6Gg6YTltcrGNS0',
      isLoading: false,
      reading: 'fast',
      full: '<p>A few months ago I started practicing ansible and some Javascript with React and NodeJs. <br>\nAs a playground im using some EC2 instances in AWS, and I did not want to re configure everything everytime that I test the site . For this I wrote an Ansible playbook that performs all the required actions to get the app online.</p>\n\n<p>High level overview of what it does:</p>\n\n<ul>\n<li>Extracts the repository names from the frontend_git_repo and backend_git_repo variables.</li>\n<li>Updates the system packages and reboots the machine if updates were installed.</li>\n<li>Installs gnupg and curl, which are required for MongoDB.</li>\n<li>Sets up the NodeSource repository and installs Node.js.</li>\n<li>Checks if the MongoDB GPG key is already set up, and if not, it sets it up.</li>\n<li>Creates a list file for MongoDB and updates the package list.</li>\n<li>Installs MongoDB and starts the mongod service.</li>\n<li>Installs pm2 globally, which is a process manager for Node.js applications.</li>\n<li>Installs the Nginx web server and configures it.</li>\n<li>Copies the SSH key to the EC2 instance.</li>\n<li>Clones the frontend and backend repositories from GitHub.</li>\n<li>Creates a new folder in the backend directory.</li>\n<li>Deletes the copied SSH key from the EC2 instance.</li>\n<li>Builds the frontend application and moves it to the appropriate directory.</li>\n<li>Configures pm2 for the backend application and starts it.</li>\n<li>Restarts the Nginx service.</li>\n</ul>\n\n<p>All the actions above described , are handled by Ansible and a UI called Ansible Semaphore.</p>\n\n<p>Everything is in this repo where you can find the "Mean Stack playbook" and the Ansible Semaphore Docker comppose file to build the controller. </p>\n\n<p>I really recommend to use Ansible or any tool you want to avoid spending lot of time installing and configuring test  services. </p>\n\n<p>My humble collaboration:</p>\n\n<p><a href="https://github.com/imaerials/ansible-home-lab">https://github.com/imaerials/ansible-home-lab</a></p>\n\n',
      media: [],
      originId: 'https://dev.to/arielro85/deploy-mean-with-ansible-3h9a',
      publishedAt: 1716575462,
      title: 'Deploy MEAN with Ansible',
      url: 'https://dev.to/arielro85/deploy-mean-with-ansible-3h9a',
      feedId: 'QG9TMqaBIEPy0LuAr6nyZ'
    }
  },
  {
    feed: {
      id: 'M1wasz-KFdVhQ2NwcQf9a',
      isLoading: false,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      reading: 'fast',
      lastOriginId: '39cf5082-ad03-4081-97d4-76b8268c849d',
      lastPublishedAt: 1716536400,
      loader: 'rss',
      title: 'Stack Overflow Blog',
      url: 'https://stackoverflow.blog/feed/'
    },
    post: {
      id: 'miO1NUEF1CvaglDKsNpsu',
      isLoading: false,
      reading: 'fast',
      full: 'Ben and Ryan are joined by Robin Gupta for a conversation about benchmarking and testing AI systems. They talk through the lack of trust and confidence in AI, the inherent challenges of nondeterministic systems, the role of human verification, and whether we can (or should) expect an AI to be reliable.',
      media: [],
      originId: '39cf5082-ad03-4081-97d4-76b8268c849d',
      publishedAt: 1716536400,
      title: 'Would you board a plane safety-tested by GenAI?',
      url: 'https://stackoverflow.blog/2024/05/24/would-you-board-a-plane-safety-tested-by-genai/',
      feedId: 'M1wasz-KFdVhQ2NwcQf9a'
    }
  },
  {
    feed: {
      id: 'yIfpdmULzjh7qP-NLvwkd',
      isLoading: false,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      lastOriginId: 'https://github.blog/?p=78141',
      lastPublishedAt: 1716480001,
      loader: 'rss',
      reading: 'fast',
      title: 'The GitHub Blog',
      url: 'https://github.blog/feed/'
    },
    post: {
      id: 'PALe4XfLPf0ybMdAhqrBY',
      isLoading: false,
      reading: 'fast',
      full: '<p>Announcing the second cohort, delivering value to projects, and driving a new frontier.</p>\n<p>The post <a href="https://github.blog/2024-05-23-2024-github-accelerator-meet-the-11-projects-shaping-open-source-ai/">2024 GitHub Accelerator: Meet the 11 projects shaping open source AI</a> appeared first on <a href="https://github.blog">The GitHub Blog</a>.</p>\n',
      media: [],
      originId: 'https://github.blog/?p=78141',
      publishedAt: 1716480001,
      title:
        '2024 GitHub Accelerator: Meet the 11 projects shaping open source AI',
      url: 'https://github.blog/2024-05-23-2024-github-accelerator-meet-the-11-projects-shaping-open-source-ai/',
      feedId: 'yIfpdmULzjh7qP-NLvwkd'
    }
  },
  {
    feed: {
      id: 'JIUIiDNU83VZd4HcI02Ca',
      isLoading: false,
      categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
      lastOriginId:
        'https://evilmartians.com/chronicles/how-does-your-chatbot-ux-size-up-the-5-laws-of-chatrobotics',
      lastPublishedAt: 1716336000,
      loader: 'atom',
      reading: 'fast',
      title: 'Evil Martians',
      url: 'https://evilmartians.com/chronicles.atom'
    },
    post: {
      id: 'PH39oAk9BDzzJVQQrLemq',
      isLoading: false,
      reading: 'fast',
      full: '<article><section><strong>Authors: </strong>Ekaterina Shibakova, Frontend Engineer, and Travis Turner, Tech Editor</section><section><strong>Topics: </strong>Frontend, Full Cycle Software Development, Backend Development, JavaScript, Node.js</section><a href="https://evilmartians.com/chronicles/how-does-your-chatbot-ux-size-up-the-5-laws-of-chatrobotics"><img src="https://evilmartians.com/static/cover-3e707d5b139e17e9487ac5ee092cbd2a.png" class="webfeedsFeaturedVisual"></a><section><p><em>The quality of a chatbot\'s UX determines success. Take these 5 UX principles to heart during development.</em></p><p></p><p>Despite the rise of LLMs and AI-powered solutions, chatbots are still relevant and widespread: efficient, cost-effective, with the ability to automate processes (like answering customer questions), implement specific responses, and much more, all paired with unmatched convenience. But just rolling out your chatbot isn\'t enough! Rather, the quality of the UX is the determining factor of success‚Äîand that\'s on developers like us.</p><p></p></section><a href="https://evilmartians.com/chronicles/how-does-your-chatbot-ux-size-up-the-5-laws-of-chatrobotics">Read more</a></article>',
      intro:
        "The quality of a chatbot's UX determines success. Take these 5 UX principles to heart during development.",
      media: [],
      originId:
        'https://evilmartians.com/chronicles/how-does-your-chatbot-ux-size-up-the-5-laws-of-chatrobotics',
      publishedAt: 1716336000,
      title: 'How does your chatbot UX size up? The 5 laws of ChatRobotics',
      url: 'https://evilmartians.com/chronicles/how-does-your-chatbot-ux-size-up-the-5-laws-of-chatrobotics',
      feedId: 'JIUIiDNU83VZd4HcI02Ca'
    }
  }
]
