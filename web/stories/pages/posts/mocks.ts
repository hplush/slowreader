import type { FastEntry, FeedValue, PostValue } from '@slowreader/core'

const MOCKED_FEED: FeedValue = {
  categoryId: 'tazgdkYFQ9FtZqB7xOGBc',
  id: 'QG9TMqaBIEPy0LuAr6nyZ',
  lastOriginId:
    'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
  lastPublishedAt: 1716718666,
  loader: 'rss',
  reading: 'fast',
  title: 'DEV Community',
  url: 'https://dev.to/feed'
}

const MOCKED_POSTS: PostValue[] = [
  {
    feedId: 'QG9TMqaBIEPy0LuAr6nyZ',
    full: "<p>As a web developer, I wondered why there are two storages in browsers a session and a local storage. On searching about it I got that the only difference is about how long the data stays. I said okayyy...! After that, I never bothered about this thing again. </p>\n\n<p>While working with a huge client I found some challenges/errors which were solved when I transferred some data from session storage to local storage.</p>\n\n<p>I thought to take a deeper dive into this thing! So here I am sharing the exact details that answer the question of why we have local and session storage.</p>\n\n\n\n\n<h2>\n  \n  \n  Defination wise:\n</h2>\n\n<p>Local and session storage are both part of the Web Storage API, which allows websites to store data on the client side within the user's browser.</p>\n\n<p>If you, my friend are a developer then this definition should be enough for you! (for the similarities, not the differences üòÖ)</p>\n\n<p>Below are the indeed required details:</p>\n\n<h2>\n  \n  \n  Persistence Duration\n</h2>\n\n<p>Local Storage: Data stored in local storage has <strong>no expiration time</strong>. It remains available even after the browser is closed and reopened, providing a way to persist data across sessions. This is useful for data that needs to be kept between visits to the website, such as <strong>user preferences, settings, or state information</strong>.</p>\n\n<p>Session Storage: Data stored in session storage is only <strong>available for the duration of the page session</strong>. It is cleared when the page session ends, which typically happens when the browser tab or window is closed. This is ideal for temporary data that should only be available during a single session, such as <strong>form inputs or state information specific to that session</strong>.</p>\n\n\n\n\n<h2>\n  \n  \n  Scope (That's where I was stuck)\n</h2>\n\n<p>Local Storage: Accessible by all tabs and windows that <strong>share the same origin</strong> (same protocol, host, and port). This means if a user opens multiple tabs on the same site, they can all access the same local storage data.</p>\n\n<p>Session Storage: Isolated to the tab or window where it was created. <strong>Different tabs or windows do not share session storage</strong>, even if they are on the same site. This ensures that data is isolated per session, preventing potential conflicts or data leakage between tabs.</p>\n\n\n\n\n<h2>\n  \n  \n  Use Cases\n</h2>\n\n<p>Local Storage: Storing user preferences and settings. Caching data can improve performance by avoiding repeated network requests.<br>\nPersisting user state or information across sessions.</p>\n\n<p>Session Storage: Temporary storage for data during a single session, such as form data that hasn't been submitted yet. Information that should be cleared when the user closes the tab, like temporary state information that is session-specific.</p>\n\n\n\n\n<h2>\n  \n  \n  Security Considerations\n</h2>\n\n<p>Local Storage: Since data persists indefinitely, it can be a target for attackers if sensitive information is stored without proper security measures. It is essential to avoid storing sensitive data like passwords or personal information in local storage.</p>\n\n<p>Session Storage: Data has a shorter lifespan, reducing the risk window for potential exploitation. However, it still should not be used for highly sensitive information without proper security measures.</p>\n\n\n\n\n<p>That's all!! </p>\n\n<p>This is all the stuff that I could find out. If you have any other thing in mind which I missed just go to comments and mention about the same!</p>\n\n<p>Stay happy, Keep hustling<br>\nSigning off Meet Bhalodiya,</p>\n\n<p>Peace ‚úåÔ∏è</p>\n\n",
    id: 'PsH5B3B0k-7dM73mQ7UGQ',
    media: [],
    originId:
      'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl',
    publishedAt: 1716718666,
    reading: 'fast',
    title:
      'Reasons you might not know why there are two, a local and a session storage.',
    url: 'https://dev.to/meetbhalodiya/reasons-you-might-not-know-why-there-are-two-a-local-and-a-session-storage-2jbl'
  },
  {
    feedId: 'QG9TMqaBIEPy0LuAr6nyZ',
    full: '<p>Hi Folks,</p>\n\n<p>For past month I was scraping interview questions for Amazon, Google, Meta, Netflix, Yahoo, Cloudflare, Accenture etc.. in various sources, filtering useful questions (imho) and rewriting them in more details with solutions.</p>\n\n<p>publishing it here - <a href="https://prepare.sh/engineering/devops">https://prepare.sh/engineering/devops</a> (if you\'ll have issues with login please clean cookies).</p>\n\n<p>Also I will keep adding companies/question to have around 50+ top companies with their interview questions, so its work in progress.. If you find this type of content useful and want to help me with code/content/etc pls dm me :)</p>\n\n',
    id: 'QksKxX3kURc51qu_ZF5EA',
    media: [],
    originId:
      'https://dev.to/alexmuradov/i-scraped-all-devops-interview-questions-for-meta-amazon-google-yahoo-here-they-are-20li',
    publishedAt: 1716717756,
    reading: 'fast',
    title:
      'I scraped all DevOps Interview Questions for Meta, Amazon, Google, Yahoo... here they are..',
    url: 'https://dev.to/alexmuradov/i-scraped-all-devops-interview-questions-for-meta-amazon-google-yahoo-here-they-are-20li'
  },
  {
    feedId: 'QG9TMqaBIEPy0LuAr6nyZ',
    full: '<p>How to Set Up Jenkins on¬†Docker<br>\n<strong>Introduction</strong><br>\nJenkins is a widely-used open-source automation server that helps automate the non-human part of the software development process. Docker, on the other hand, is a platform that enables developers to create, deploy, and run applications in containers. Combining Jenkins with Docker provides a powerful tool for continuous integration and continuous delivery (CI/CD).<br>\nIn this guide, we\'ll walk through the steps to set up Jenkins on Docker.<br>\n<strong>Prerequisites</strong></p>\n\n<ul>\n<li>Docker installed on your system.</li>\n<li>Basic understanding of Docker and Jenkins.</li>\n<li>Sufficient privileges to run Docker commands.</li>\n</ul>\n\n<p>Setting up Jenkins on Docker offers several advantages that can streamline and enhance your CI/CD workflow. Here are the key reasons why you might choose to deploy Jenkins using Docker:<br>\n<strong>1. Consistency and Isolation</strong><br>\nConsistency: Docker containers ensure that Jenkins runs in a consistent environment across different development, testing, and production environments. This consistency helps eliminate issues caused by variations in software configurations.<br>\nIsolation: Docker containers isolate Jenkins and its dependencies from other applications on the host system. This isolation helps prevent conflicts and makes it easier to manage dependencies.<br>\n<strong>2. Simplified Setup and Configuration</strong><br>\nEase of Setup: Docker simplifies the setup process by allowing you to pull and run pre-configured Jenkins images. This reduces the complexity involved in manually installing Jenkins and configuring its environment.<br>\nConfiguration Management: Docker makes it easy to version and manage configurations through Dockerfiles and Docker Compose, ensuring that your Jenkins setup can be easily replicated or modified.<br>\n<strong>3. Portability</strong><br>\nDocker containers can run on any system that supports Docker, making your Jenkins setup highly portable. This portability is particularly useful for developers working in different environments or for teams that need to move their CI/CD pipeline across various stages of development and production.<br>\n<strong>4. Scalability</strong><br>\nResource Allocation: Docker allows you to allocate specific resources (CPU, memory) to Jenkins containers, ensuring that Jenkins performs optimally without affecting other applications.<br>\nScaling: Running Jenkins in Docker containers makes it easier to scale your CI/CD infrastructure. You can quickly spin up additional Jenkins instances to handle increased workloads or parallelize build processes.<br>\n<strong>5. Simplified Maintenance and¬†Upgrades</strong><br>\nUpgrades: Upgrading Jenkins is straightforward with Docker. You can pull the latest Jenkins image and recreate the container without worrying about breaking the underlying system.<br>\nBackup and Recovery: Docker volumes can be used to persist Jenkins data, making it easier to backup and restore configurations, jobs, and build history.<br>\n<strong>6. Security</strong><br>\nSandboxing: Docker containers provide an additional layer of security by sandboxing Jenkins from the host system. This reduces the risk of potential vulnerabilities in Jenkins affecting the host.<br>\nControlled Access: Docker\'s networking and permission features allow for fine-grained control over how Jenkins interacts with other services and the network.<br>\n<strong>7. DevOps Integration</strong><br>\nDocker is a staple in modern DevOps practices. Running Jenkins on Docker integrates seamlessly with other containerized services and tools in your DevOps pipeline, promoting a more cohesive and efficient workflow.<br>\n<strong>Step-by-Step Guide</strong><br>\n<strong>Step 1: Install¬†Docker</strong><br>\nBefore setting up Jenkins, ensure Docker is installed on your machine.<br>\nFor Ubuntu:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>sudo apt update\nsudo apt install -y docker.io\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 2: Pull the Jenkins Docker¬†Image</strong><br>\nJenkins maintains an official Docker image. To pull the latest Jenkins image, run:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>docker pull jenkins/jenkins:lts\n</code></pre>\n\n</div>\n\n\n\n<p>The lts tag refers to the Long Term Support version, which is stable and recommended for most users.</p>\n\n<p><strong>Step 3: Run the Jenkins Container</strong><br>\nCreate and start a Jenkins container with the following command:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>docker run -d -p 8080:8080 jenkins/jenkins:lts\n</code></pre>\n\n</div>\n\n\n\n<p>Here\'s a breakdown of the command:<br>\n-d: Run the container in detached mode.<br>\n-p 8080:8080: Map port 8080 of the host to port 8080 of the container (Jenkins web int)</p>\n\n<p><strong>Step 4: Access¬†Jenkins</strong><br>\nOnce the container is running, you can access Jenkins by navigating to <a href="http://localhost:8080">http://localhost:8080</a> in your web browser.</p>\n\n<p><strong>Step 5: Unlock¬†Jenkins</strong><br>\nOn your first visit, Jenkins will ask you to unlock it using a password stored in the Docker container. Retrieve this password with:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight plaintext"><code>docker exec -it jenkins bash\ncat /var/jenkins_home/secrets/initialAdminPassword\n</code></pre>\n\n</div>\n\n\n\n<p>Copy the password and paste it into the Jenkins unlock page.</p>\n\n<p><strong>Step 6: Install Suggested Plugins</strong><br>\nAfter unlocking Jenkins, you\'ll be prompted to install plugins. Choose the "Install suggested plugins" option to get started quickly.</p>\n\n<p><strong>Step 7: Create an Admin¬†User</strong><br>\nNext, you\'ll need to create an admin user. Fill in the required details and complete the setup.</p>\n\n<p><strong>Step 8: Configure Jenkins</strong></p>\n\n<ol>\n<li>Now that Jenkins is set up, you can start configuring it to suit your project needs. This includes setting up:</li>\n<li>Global Tool Configuration: Define the locations for JDK, Git, Gradle, etc.</li>\n<li>Credentials: Add necessary credentials for accessing repositories and other tools.</li>\n<li>Jobs/Pipelines: Create jobs or pipelines for your CI/CD process.</li>\n</ol>\n\n<p><strong>Conclusion</strong><br>\nDeploying Jenkins on Docker simplifies the setup and management of your CI/CD pipeline. Docker containers provide a consistent environment for Jenkins, enhancing the reliability and scalability of your build process.<br>\nBy following the steps outlined in this guide, you will have a fully functional Jenkins server running in a Docker container. This setup allows you to explore and leverage Jenkins\' extensive range of plugins and configurations to further optimize your CI/CD workflow.</p>\n\n',
    id: 'pccrbTO5c_P5AZD-QoRmj',
    media: [],
    originId:
      'https://dev.to/prajwal2023/streamlining-cicd-a-step-by-step-guide-to-setting-up-jenkins-on-docker-2b6',
    publishedAt: 1716717649,
    reading: 'fast',
    title:
      '"Streamlining CI/CD: A Step-by-Step Guide to Setting Up Jenkins on Docker"',
    url: 'https://dev.to/prajwal2023/streamlining-cicd-a-step-by-step-guide-to-setting-up-jenkins-on-docker-2b6'
  },
  {
    feedId: 'QG9TMqaBIEPy0LuAr6nyZ',
    full: '<p>Docker is a popular containerization platform that allows developers to package their applications and dependencies into portable containers. This article provides a step-by-step guide on how to build Docker images on a Mac with an M1 chip.</p>\n\n<h3>\n  \n  \n  Solution Steps\n</h3>\n\n<p>Docker features an additional build called \'buildx\' that should be included with the Docker installation (ver:^20). We will use the <code>buildx</code> command to build the image.</p>\n\n<h4>\n  \n  \n  Step 1\n</h4>\n\n<p>Open Docker Desktop and go to Settings &gt; Resources tab. Increase memory and swap size, and restart Docker Desktop, so that later we do not run into the <code>JavaScript heap out of memory</code> error.<br>\n<a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fiuso3ogzd0mahqg0cl23.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fiuso3ogzd0mahqg0cl23.png" alt="Resource setting" width="800" height="351"></a></p>\n<h4>\n  \n  \n  Step 2\n</h4>\n\n<p>Also, add and modify the following command in the <code>node-project/Dockerfile</code>. </p>\n\n<p>OLD DOCKERFILE<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight docker"><code><span class="c">### STAGE 1: Build ###</span>\n<span class="c"># We label our intermediary docker container as \'builder\' to build/compile frontend dependencies</span>\n<span class="k">FROM</span><span class="w"> </span><span class="s">node:10.15.0-alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">builder</span>\n<span class="k">ARG</span><span class="s"> environment</span>\n</code></pre>\n\n</div>\n\n\n\n<p>NEW DOCKERFILE<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight docker"><code><span class="c">### STAGE 1: Build ###</span>\n<span class="c"># We label our intermediary docker container as \'builder\' to build/compile frontend dependencies</span>\n<span class="k">FROM</span><span class="w"> </span><span class="s">--platform=$BUILDPLATFORM node:10.15.0-alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">builder</span>\n<span class="k">ARG</span><span class="s"> environment</span>\n<span class="k">ENV</span><span class="s"> NODE_OPTIONS=--max_old_space_size=2048</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Step 3\n</h4>\n\n<p>Generally, the CPU of your machine can only run binaries for its native architecture. An x86 CPU can\'t run ARM binaries and vice versa. So, when we are building an image on an Intel machine, it cannot run the shell binary for ARM. Let\'s install the Docker image which contains binaries for other architectures.<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code> <span class="nv">$ </span>docker run <span class="nt">--privileged</span> <span class="nt">--rm</span> tonistiigi/binfmt <span class="nt">--install</span> all\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Step 4\n</h4>\n\n<p>Create a new builder using the <code>docker-container</code> driver which gives you access to more complex features like multi-platform builds and the more advanced cache exporters, which are currently unsupported in the default Docker driver:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code><span class="nv">$ </span>docker buildx create <span class="nt">--name</span> customBuilder <span class="nt">--driver</span> docker-container <span class="nt">--bootstrap</span>\n<span class="nv">$ </span>docker buildx use customBuilder\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Step 5\n</h4>\n\n<p>Build &amp; load image locally</p>\n\n<p>The command below will build an image for standard x86 platforms (<code>linux/amd64</code>). For Apple Silicon Macs, use the platform as (<code>linux/arm64</code>).</p>\n\n<p>[Note: run the command from the project directory]<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code><span class="nv">$ </span>docker buildx build <span class="nt">--platform</span><span class="o">=</span>linux/amd64 <span class="nt">-t</span> &lt;tag&gt; <span class="nt">--build-arg</span> <span class="nv">environment</span><span class="o">=</span>&lt;<span class="nb">env</span><span class="o">&gt;</span> <span class="nb">.</span> <span class="nt">--load</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Build &amp; push image directly<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code><span class="nv">$ </span>docker buildx build <span class="nt">--platform</span><span class="o">=</span>linux/amd64 <span class="nt">-t</span> &lt;tag&gt; <span class="nt">--build-arg</span> <span class="nv">environment</span><span class="o">=</span>&lt;<span class="nb">env</span><span class="o">&gt;</span> <span class="nb">.</span> <span class="nt">--push</span>\n</code></pre>\n\n</div>\n\n\n\n',
    id: 'VEJXq_qz6ntmO0YgghUT2',
    media: [],
    originId: 'https://dev.to/anilxnmdrz/docker-build-with-mac-2j9d',
    publishedAt: 1716717393,
    reading: 'fast',
    title: 'Docker Build with Mac',
    url: 'https://dev.to/anilxnmdrz/docker-build-with-mac-2j9d'
  },
  {
    feedId: 'QG9TMqaBIEPy0LuAr6nyZ',
    full: '<div class="ltag__stackexchange--container">\n  <div class="ltag__stackexchange--title-container">\n    \n      <div class="ltag__stackexchange--title">\n        <div class="ltag__stackexchange--header">\n          <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoTUKOcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt="">\n          <a href="https://stackoverflow.com/questions/75126245/cannot-read-properties-of-undefined-reading-invalidatestags/77897380#77897380" rel="noopener noreferrer">\n            <span class="title-flare">answer</span> re: Cannot read properties of undefined (reading \'invalidatesTags\')\n          </a>\n        </div>\n        <div class="ltag__stackexchange--post-metadata">\n          <span>Jan 29 \'24</span>\n        </div>\n      </div>\n      <a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/75126245/cannot-read-properties-of-undefined-reading-invalidatestags/77897380#77897380" rel="noopener noreferrer">\n        <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeieW07A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt="">\n        <div class="ltag__stackexchange--score-number">\n          1\n        </div>\n        <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2-sXgSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt="">\n      </a>\n    \n  </div>\n  <div class="ltag__stackexchange--body">\n    \n<p>I solved my problem by following their docs!</p>\n<p><a href="https://redux-toolkit.js.org/rtk-query/api/createApi#reducerpath" rel="nofollow noreferrer">This link will take you exactly where they (RTK docs) talk about it</a></p>\n<blockquote>\n<p>The reducerPath is a unique key that your service will be mounted to in your store. If you call createApi more than once in your application, you will need‚Ä¶</p>\n</blockquote>\n    \n  </div>\n  <div class="ltag__stackexchange--btn--container">\n    <a href="https://stackoverflow.com/questions/75126245/cannot-read-properties-of-undefined-reading-invalidatestags/77897380#77897380" class="ltag__stackexchange--btn" rel="noopener noreferrer">Open Full Answer</a>\n  </div>\n</div>\n\n\n',
    id: 'tPyZlHO9MouO_RFRLBNMg',
    media: [],
    originId:
      'https://dev.to/hossain45/answer-cannot-read-properties-of-undefined-reading-invalidatestags-duplicate-igp',
    publishedAt: 1716716178,
    reading: 'fast',
    title:
      "Answer: Cannot read properties of undefined (reading 'invalidatesTags') [duplicate]",
    url: 'https://dev.to/hossain45/answer-cannot-read-properties-of-undefined-reading-invalidatestags-duplicate-igp'
  },
  {
    feedId: 'QG9TMqaBIEPy0LuAr6nyZ',
    full: '<p>In this blog, I will show you how to use the OpenAI Assistant with NextJS.</p>\n\n<h2>\n  \n  \n  What is the OpenAI Assistant?\n</h2>\n\n<p>The OpenAI Assistant is a purpose-built AI that uses OpenAI\'s models and can access files, maintain persistent threads, and call tools. <a href="https://help.openai.com/en/articles/8550641-assistants-api-v2-faq">Reference</a>.</p>\n\n<h2>\n  \n  \n  Let\'s Get Started\n</h2>\n\n<h3>\n  \n  \n  Create Your First Assistant\n</h3>\n\n<ul>\n<li>Prerequisite: You need to have an OpenAI API subscription.\nGo to the <a href="https://platform.openai.com/docs/overview">OpenAI platform</a>, and on the navigation sidebar, click on "Assistant."</li>\n</ul>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fko0anzps5l6gtsu3vkqu.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fko0anzps5l6gtsu3vkqu.png" alt="assistant menu" width="588" height="423"></a></p>\n\n<p>On the assistant page, click "Create your assistant."</p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Foxztkcsf4pp8847f4l5q.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Foxztkcsf4pp8847f4l5q.png" alt="create assistant menu" width="800" height="610"></a></p>\n\n<p>Give it a name and describe what you want your assistant to do. Remember, the more detailed your description is, the more precise the assistant\'s answers will be.</p>\n\n<h3>\n  \n  \n  Create the NextJS UI\n</h3>\n\n<p>I assume you know how to create a NextJS project. In this project, I use NextJS with <a href="https://ui.shadcn.com/">Shadcn UI</a>.</p>\n\n<ul>\n<li>Create the Chat UI\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="dl">"</span><span class="s2">use client</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="k">import</span> <span class="nx">CustomReactMarkdown</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/CustomMarkdown</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="nx">WithAuth</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/WithAuth</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/ui/button</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">Textarea</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/components/ui/textarea</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">cloneDeep</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">lodash</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">useForm</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-hook-form</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span>\n  <span class="nx">BotIcon</span><span class="p">,</span>\n  <span class="nx">CircleSlash</span><span class="p">,</span>\n  <span class="nx">SendHorizonalIcon</span><span class="p">,</span>\n  <span class="nx">User</span><span class="p">,</span>\n  <span class="nx">Wand</span><span class="p">,</span>\n<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">lucide-react</span><span class="dl">"</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useRef</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>\n\n<span class="nx">type</span> <span class="nx">Message</span> <span class="o">=</span> <span class="p">{</span>\n  <span class="na">text</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n  <span class="nl">role</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="p">{</span> <span class="nx">register</span><span class="p">,</span> <span class="nx">handleSubmit</span><span class="p">,</span> <span class="nx">reset</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useForm</span><span class="p">();</span>\n\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">chatLogs</span><span class="p">,</span> <span class="nx">setChatLogs</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">Message</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([]);</span>\n  <span class="kd">const</span> <span class="nx">chatRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>\n  <span class="kd">const</span> <span class="nx">lastMessage</span> <span class="o">=</span> <span class="nx">chatLogs</span><span class="p">?.[</span><span class="nx">chatLogs</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]?.</span><span class="nx">text</span><span class="p">;</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">processing</span><span class="p">,</span> <span class="nx">setProcessing</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n  <span class="kd">const</span> <span class="p">[</span><span class="nx">isTyping</span><span class="p">,</span> <span class="nx">setIsTyping</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n\n  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="k">if </span><span class="p">(</span><span class="nx">chatRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">chatRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nf">scrollTo</span><span class="p">({</span>\n        <span class="na">top</span><span class="p">:</span> <span class="nx">chatRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">scrollHeight</span><span class="p">,</span>\n        <span class="na">behavior</span><span class="p">:</span> <span class="dl">"</span><span class="s2">smooth</span><span class="dl">"</span><span class="p">,</span>\n      <span class="p">});</span>\n    <span class="p">}</span>\n  <span class="p">},</span> <span class="p">[</span><span class="nx">lastMessage</span><span class="p">]);</span>\n\n  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">async </span><span class="p">(</span><span class="nx">data</span><span class="p">:</span> <span class="nx">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">prompt</span><span class="p">;</span>\n    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">prompt</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n      <span class="nf">setProcessing</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>\n      <span class="nf">setChatLogs</span><span class="p">((</span><span class="nx">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span>\n        <span class="p">...</span><span class="nx">prev</span><span class="p">,</span>\n        <span class="p">{</span>\n          <span class="na">text</span><span class="p">:</span> <span class="nx">prompt</span><span class="p">,</span>\n          <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">user</span><span class="dl">"</span><span class="p">,</span>\n        <span class="p">},</span>\n      <span class="p">]);</span>\n      <span class="kd">const</span> <span class="nx">formdata</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FormData</span><span class="p">();</span>\n      <span class="nx">formdata</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span><span class="p">,</span> <span class="nx">prompt</span><span class="p">);</span>\n      <span class="nf">reset</span><span class="p">();</span>\n\n      <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">/api/assistant</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>\n        <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>\n        <span class="na">body</span><span class="p">:</span> <span class="nx">formdata</span><span class="p">,</span>\n      <span class="p">});</span>\n\n      <span class="kd">const</span> <span class="nx">reader</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">?.</span><span class="nf">pipeThrough</span><span class="p">(</span><span class="k">new</span> <span class="nc">TextDecoderStream</span><span class="p">()).</span><span class="nf">getReader</span><span class="p">();</span>\n\n      <span class="k">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kd">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">reader</span><span class="p">?.</span><span class="nf">read</span><span class="p">())</span> <span class="k">as</span> <span class="p">{</span>\n          <span class="na">done</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>\n          <span class="nl">value</span><span class="p">:</span> <span class="nx">any</span><span class="p">;</span>\n        <span class="p">};</span>\n\n        <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nf">setIsTyping</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n          <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n\n        <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>\n          <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">?.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">in_progress</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>\n            <span class="nf">setProcessing</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n          <span class="p">}</span>\n          <span class="k">if </span><span class="p">(</span><span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">?.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>\n            <span class="nf">setIsTyping</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n          <span class="p">}</span>\n          <span class="kd">let</span> <span class="nx">content</span><span class="p">;</span>\n          <span class="kd">const</span> <span class="nx">cleanedString</span> <span class="o">=</span> <span class="nx">val</span><span class="p">?.</span><span class="nx">value</span><span class="p">;</span>\n          <span class="nx">content</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">cleanedString</span><span class="p">);</span>\n\n          <span class="k">if </span><span class="p">(</span><span class="nx">content</span><span class="p">?.</span><span class="nx">event</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">thread.message.delta</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>\n            <span class="k">if </span><span class="p">(</span><span class="nx">processing</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nf">setProcessing</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>\n            <span class="p">}</span>\n            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">isTyping</span><span class="p">)</span> <span class="p">{</span>\n              <span class="nf">setIsTyping</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>\n            <span class="p">}</span>\n            <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">content</span><span class="p">?.</span><span class="nx">data</span><span class="p">?.</span><span class="nx">delta</span><span class="p">?.</span><span class="nx">content</span><span class="p">?.[</span><span class="mi">0</span><span class="p">]?.</span><span class="nx">text</span><span class="p">?.</span><span class="nx">value</span> <span class="o">??</span> <span class="dl">""</span><span class="p">;</span>\n            <span class="nf">setChatLogs</span><span class="p">((</span><span class="nx">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n              <span class="kd">const</span> <span class="nx">newLogs</span> <span class="o">=</span> <span class="nf">cloneDeep</span><span class="p">(</span><span class="nx">prev</span><span class="p">);</span>\n              <span class="kd">const</span> <span class="nx">lastMessage</span> <span class="o">=</span> <span class="nx">newLogs</span><span class="p">?.[</span><span class="nx">newLogs</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>\n              <span class="k">if </span><span class="p">(</span><span class="nx">lastMessage</span><span class="p">?.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">assistant</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>\n                <span class="nx">lastMessage</span><span class="p">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="nx">text</span><span class="p">;</span>\n              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n                <span class="nx">newLogs</span><span class="p">.</span><span class="nf">push</span><span class="p">({</span>\n                  <span class="nx">text</span><span class="p">,</span>\n                  <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">assistant</span><span class="dl">"</span><span class="p">,</span>\n                <span class="p">});</span>\n              <span class="p">}</span>\n              <span class="k">return</span> <span class="nx">newLogs</span><span class="p">;</span>\n            <span class="p">});</span>\n          <span class="p">}</span>\n        <span class="p">}</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n  <span class="p">};</span>\n\n  <span class="k">return </span><span class="p">(</span>\n    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">relative  max-w-7xl mx-auto min-h-[calc(100vh-80px)]</span><span class="dl">"</span><span class="o">&gt;</span>\n      <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-xl sm:text-2xl text-center mt-2 relative </span><span class="dl">"</span><span class="o">&gt;</span>\n        <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex items-center space-x-2 justify-center</span><span class="dl">"</span><span class="o">&gt;</span>\n          <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="nx">Recipe</span> <span class="nx">Assistant</span> <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>          <span class="o">&lt;</span><span class="nx">BotIcon</span> <span class="nx">color</span><span class="o">=</span><span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span> <span class="o">/&gt;</span>\n        <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="nx">div</span>\n        <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">chatRef</span><span class="p">}</span>\n        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">overflow-y-auto mt-2 sm:mt-4 p-3 sm:p-8 rounded-lg no-scrollbar h-[calc(100vh-230px)]</span><span class="dl">"</span>\n      <span class="o">&gt;</span>\n        <span class="p">{</span><span class="nx">chatLogs</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">log</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span>\n          <span class="nx">log</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">user</span><span class="dl">"</span> <span class="p">?</span> <span class="p">(</span>\n            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">relative p-2 sm:p-6</span><span class="dl">"</span><span class="o">&gt;</span>\n              <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-gray-500</span><span class="dl">"</span><span class="o">&gt;</span>\n                <span class="o">&lt;</span><span class="nx">User</span>\n                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:absolute left-0 sm:-translate-x-[120%]</span><span class="dl">"</span>\n                  <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">27</span><span class="p">}</span>\n                <span class="sr">/</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">bg</span><span class="o">-</span><span class="nx">gray</span><span class="o">-</span><span class="mi">50</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">log</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>          <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>\n            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">relative </span><span class="dl">"</span><span class="o">&gt;</span>\n              <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-gray-500 </span><span class="dl">"</span><span class="o">&gt;</span>\n                <span class="o">&lt;</span><span class="nx">BotIcon</span>\n                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:absolute left-0 sm:-translate-x-[120%]</span><span class="dl">"</span>\n                  <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="mi">27</span><span class="p">}</span>\n                <span class="sr">/</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>              <span class="o">&lt;</span><span class="nx">CustomReactMarkdown</span>\n                <span class="nx">content</span><span class="o">=</span><span class="p">{</span><span class="nx">log</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>\n                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">p-2 sm:p-6  bg-gray-100 my-3</span><span class="dl">"</span>\n              <span class="o">/&gt;</span>\n            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>          <span class="p">)</span>\n        <span class="p">)}</span>\n        <span class="p">{</span><span class="nx">processing</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>\n          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex items-center space-x-2</span><span class="dl">"</span><span class="o">&gt;</span>\n            <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">animate-spin </span><span class="dl">"</span><span class="o">&gt;</span>\n              <span class="o">&lt;</span><span class="nx">CircleSlash</span> <span class="o">/&gt;</span>\n            <span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;\n</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>        <span class="p">)}</span>\n      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">absolute w-full left-0 bottom-0 text-sm</span><span class="dl">"</span><span class="o">&gt;</span>\n        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">w-10/12 mx-auto sm:hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>        <span class="o">&lt;</span><span class="nx">form</span>\n          <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="nf">handleSubmit</span><span class="p">(</span><span class="nx">onSubmit</span><span class="p">)}</span>\n          <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">flex gap-4 w-10/12  mx-auto  relative </span><span class="dl">"</span>\n        <span class="o">&gt;</span>\n          <span class="o">&lt;</span><span class="nx">Textarea</span>\n            <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">text-sm sm:text-md md:text-xl px-8 sm:px-4</span><span class="dl">"</span>\n            <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">I use the XS-10 camera. I will take pictures of a female model at 6 AM.</span><span class="dl">"</span>\n            <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span>\n            <span class="p">{...</span><span class="nf">register</span><span class="p">(</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span><span class="p">)}</span>\n            <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n              <span class="k">if </span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Enter</span><span class="dl">"</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">shiftKey</span><span class="p">)</span> <span class="p">{</span>\n                <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>\n                <span class="nf">handleSubmit</span><span class="p">(</span><span class="nx">onSubmit</span><span class="p">)();</span>\n              <span class="p">}</span>\n            <span class="p">}}</span>\n          <span class="sr">/</span><span class="err">&gt;\n</span>          <span class="o">&lt;</span><span class="nx">Button</span>\n            <span class="nx">size</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">sm</span><span class="dl">"</span><span class="p">}</span>\n            <span class="nx">variant</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">link</span><span class="dl">"</span><span class="p">}</span>\n            <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span>\n            <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">absolute right-0 sm:right-3 px-1 sm:px-3 top-1/2 -translate-y-1/2</span><span class="dl">"</span>\n            <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="nx">processing</span> <span class="o">||</span> <span class="o">!</span><span class="nx">prompt</span> <span class="o">||</span> <span class="nx">isTyping</span><span class="p">}</span>\n          <span class="o">&gt;</span>\n            <span class="o">&lt;</span><span class="nx">SendHorizonalIcon</span> <span class="o">/&gt;</span>\n          <span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;\n</span>        <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;\n</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;\n</span>  <span class="p">);</span>\n<span class="p">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This is my UI</p>\n\n<p><a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feh2wxr1av1y1undck57l.png" class="article-body-image-wrapper"><img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feh2wxr1av1y1undck57l.png" alt="chat ui" width="800" height="568"></a></p>\n\n<h3>\n  \n  \n  Create the API Route\n</h3>\n\n<p>First, you need to install the OpenAI package:<br>\n</p>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight shell"><code>npm i openai\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>The API route code example:\n</li>\n</ul>\n\n<div class="highlight js-code-highlight">\n<pre class="highlight javascript"><code><span class="k">import</span> <span class="nx">OpenAI</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">openai</span><span class="dl">\'</span><span class="p">;</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">NextRequest</span><span class="p">,</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">next/server</span><span class="dl">\'</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">openai</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OpenAI</span><span class="p">({</span>\n  <span class="na">apiKey</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">[</span><span class="dl">\'</span><span class="s1">OPENAI_API_KEY</span><span class="dl">\'</span><span class="p">],</span>\n<span class="p">});</span>\n\n<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">POST</span><span class="p">(</span><span class="nx">req</span><span class="p">:</span> <span class="nx">NextRequest</span><span class="p">,</span> <span class="nx">res</span><span class="p">:</span> <span class="nx">NextResponse</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">formData</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">req</span><span class="p">.</span><span class="nf">formData</span><span class="p">())</span> <span class="k">as</span> <span class="nx">any</span><span class="p">;</span>\n  <span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="p">(</span><span class="nx">formData</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span><span class="p">)</span> <span class="k">as</span> <span class="nx">string</span><span class="p">)</span> <span class="o">??</span> <span class="dl">\'\'</span><span class="p">;</span>\n  <span class="kd">const</span> <span class="nx">thread</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nx">beta</span><span class="p">.</span><span class="nx">threads</span><span class="p">.</span><span class="nf">create</span><span class="p">();</span>\n  <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nx">beta</span><span class="p">.</span><span class="nx">threads</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>\n    <span class="nx">thread</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>\n    <span class="p">{</span>\n      <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">user</span><span class="dl">"</span><span class="p">,</span>\n      <span class="na">content</span><span class="p">:</span> <span class="nx">prompt</span><span class="p">,</span>\n    <span class="p">}</span>\n  <span class="p">);</span>\n  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">openai</span><span class="p">.</span><span class="nx">beta</span><span class="p">.</span><span class="nx">threads</span><span class="p">.</span><span class="nx">runs</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nx">thread</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span>\n    <span class="na">assistant_id</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">[</span><span class="dl">\'</span><span class="s1">OPENAI_ASSISTANT_ID</span><span class="dl">\'</span><span class="p">]</span> <span class="k">as</span> <span class="nx">string</span><span class="p">,</span>\n    <span class="na">stream</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>\n  <span class="p">});</span>\n  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">toReadableStream</span><span class="p">();</span>\n\n  <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="p">{</span>\n    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>\n      <span class="dl">\'</span><span class="s1">Content-Type</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">text/plain</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="dl">\'</span><span class="s1">Transfer-Encoding</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">chunked</span><span class="dl">\'</span><span class="p">,</span>\n      <span class="dl">\'</span><span class="s1">Connection</span><span class="dl">\'</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">keep-alive</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="p">},</span>\n  <span class="p">});</span>\n<span class="p">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here is my own fujifilm recipes assistant <a href="https://fujixfilm.com/assistant">fujifilm assistant</a></p>\n\n<p>And that\'s it! Create your own assistant and make it work. If you have any questions, feel free to drop a comment below.</p>\n\n<p>Thanks and happy coding!</p>\n\n',
    id: 'hCzmb2cdfZ9GJjXP-_9et',
    media: [],
    originId: 'https://dev.to/nhd2106/openai-assistant-with-nextjs-1c1n',
    publishedAt: 1716715540,
    reading: 'fast',
    title: 'OpenAI Assistant with NextJS',
    url: 'https://dev.to/nhd2106/openai-assistant-with-nextjs-1c1n'
  }
]

const MOCKED_FAST_FEED: FastEntry[] = MOCKED_POSTS.map(post => ({
  feed: MOCKED_FEED,
  post
}))

export { MOCKED_FAST_FEED, MOCKED_POSTS }
